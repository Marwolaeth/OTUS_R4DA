---
title: "Язык R для анализа данных"
subtitle: "Утилита формирования отчётов Quarto"
author  : "otus.ru"
lang: ru
format:
    revealjs:
      theme: otus.scss
      logo: images/owls_R.png
      width: 960
      height: 540
      transition: convex
default-image-extension: "png"
---

##  {#slide-rec data-menu-title="Запись" background-image="images/slide.jpg" background-size="contain"}

::: {.tinytext .r-fit-text}
*Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Коллеги, рад вас видеть на вебинаре. У нас новая тема и экспериментальный формат. Вебинар посвящен Quarto. Это система публикации и утилита создания отчетов и презентаций. И презентация для вебинара у нас создана в Quarto в формате `revealjs`, допускающем интерактивный контент. Поэтому я прошу вас открыть презентацию по ссылке, которую я кидаю в чат. Этой презентацией в вашем браузере могу управлять я удаленно, а можете листать вы сами.

Для записи вебинара нужно, чтобы презентация была также на экране Zoom. Поэтому презентацию вы можете смотреть там, где вам удобнее: в браузере или в Zoom. Но в любом случае иногда я буду привлекать ваше внимание в Zoom, чтобы расшарить окно RStudio и показать Quarto в действии.

Коллеги, у вас получилось открыть презентацию? Поставьте, пожалуйста, плюсы в чат, если получилось. Формат мультиплекса – экспериментальный, поэтому я буду периодически уточнять у вас, листается ли презентация без вашего участия.

Поставьте, пожалуйста, плюс, если видите слайд с правилами вебинара.

Пожалуйста, поставьте плюс в чат, если меня хорошо видно и слышно.
:::

##  {#slide-intro data-menu-title="О вебинаре" background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
*Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Представлюсь. Я Андрей Павлюченко, медиааналитик в коммуникационном агентстве. Опыт работы в R – 10 лет. В основном работаю с, так сказать, гуманитарными данными, такими, как тексты и результаты опросов.
:::

## Правила вебинара {background-image="images/slide.jpg" background-size="contain"}

:::{.r-fit-text}
*Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Прошу вас активно участвовать. Вопросы – это хорошо. Пишите в чат или поднимайте руку, если хотите что-то сказать. Чат читаю, руки вижу. Включенная камера тоже приятно для преподавателя, но если не хочется, то не обязательно.
:::

## Маршрут вебинара {background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
*Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Занятие у нас будет обзорное. Его можно было бы назвать «Введение в Quarto». Мы начнем издалека: с того, что нового нам предлагают разработчики Quarto и что с помощью этой утилиты можно сделать. Затем составим себе такую ментальную карту того, как в принципе создаются отчеты в Quarto. Затем посмотрим на некоторые из (огромного множества) возможностей наполнения отчетов контентом и настройки отображения. Наконец, посмотрим, как создавать сложные проекты на примере веб-сайта и убедимся, что создание сайтов и книг стало проще и ближе, чем раньше.
:::

## Цели вебинара {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
*Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Зачитывает слайд своими словами]

На прошлом занятии вы уже научились создавать Rmarkdown-документы, которые затем программа `pandoc` рендерит в разные форматы. Эти знания и умения – основа того, что вы будете делать с Quarto. Но ребята из Posit долго втайне делали-делали Quarto и наделали столько, что возможностей системы хватило бы на целый курс. Поэтому на данном занятии нам важно именно разобраться. Даже начать разбираться. И тогда, если вам будет интересно, ничего невозможного в Quarto для вас не будет.
:::

## Смысл {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
*Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Зачитывает слайд своими словами]

Смысл очевиден. Да, для этого у нас уже есть Rmarkdown. И дальше, то есть прямо сейчас, мы рассмотрим, почему Quarto это шаг вперед по сравнению с Rmarkdown.

[Коллеги, есть ли вопросы по вводной части?]{style="color:#d00;"}
:::

# Знакомство с Quarto {background-image="images/slide.jpg" background-size="contain"}

## Что за Quarto? {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
Quarto – это то, что получилось, когда в тогда еще RStudio решили принципиально переделать Rmarkdown.
:::

## Что за Quarto? {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Quarto это автономное приложение. Его можно запускать из командной строки, а верстать можно не только ноутбуки с кодом, но и просто markdown-файлы.

Речь идет именно о статическом markdown-файле. Для того, чтобы исполнять ячейки с кодом, вам понадобятся соответственно R или Python.

Сейчас мы посмотрим на особенности и возможности Quarto. Коллеги, я вас попрошу, даже настаиваю на этом: то, что мы будем обсуждать – возможности системы, форматы и настройки – примеряйте на себя. Представляйте себе, что бы вы могли написать на Quarto, какой свой проект реализовать, для какой аудитории, и что вам для этого нужно узнать.
:::

## Что за Quarto? {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.tinytext .r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Первый фрагмент]

Программа RStudio включает дистрибутив Quarto, если быть точным, переносную версию Quarto. Разработчики Quarto при этом советуют все-таки скачивать программу отдельно и устанавливать в систему. Именно это мне пришлось сделать в процессе подготовки из-за проблем с рендерингом plotly. Quarto сейчас релизится намного чаще, чем RStudio, и версия в RStudio содержит обидный баг, который в Quarto уже исправлен.

[Второй фрагмент]. Для простоты понимания.

Rmarkdown++ — по аналогии с C++: нечто новое, претендующее на обобщение своего предшественника, при этом сохраняющее с ним по возможности полную совместимость.

MS Word — это про визуальный редактор в RStudio. Мы глянем на него, но подробно останавливаться не будем. Там многое понятно интуитивно, но кое-что мы все же рассмотрим.

Dreamwever, как вы, возможно, знаете — тоже программа с гибридным интерефейсом для создания сайтов. То есть там тоже можно все прописывать кодом, а можно рисовать и перетаксивать вручную. На Quarto тоже можно создавать сайты. Сайт Quarto, скорее всего, тоже создан на Quarto: это можно предположить по характерной структуре, которую мы обсудим ближе к концу занятия.

**Важно:** по словам разработчиков Posit Quarto призван заменить Rmarkdown. Rmarkdown будет поддерживаться, но не разрабатываться. То есть они будут фиксить ошибки Rmarkdown, но разработка новых «фич» ведется исключительно в рамках Quarto.
:::

## Что нового: не только R {background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Нас интересует в первую очередь R. Но стоит иметь в виду, что Observable позволяет создавать страницы, похожие на Shiny, но не требюущие разворачивания на сервере.
:::

## Многоформатность {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.tinytext .r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[**Коллеги, я вам скину сейчас ссылку на галерею Quarto, там как раз представлены документы в разных форматах:** https://quarto.org/docs/gallery/]{style="color:#d00;"}

[А теперь давайте откроем Quarto в RStudio и создадим самый базовый файл. Обратите внимание: знакомый нам клубочек Нитр сменился на стрелку с надписью Рендер. И сверстаем его. <…> А теперь посмотрим визуальный редактор. Тот самый MS Word для R.]{style="color:#d00;"} <…>

Лично мне удобнее работать с кодом, чем в визуальном редакторе.

Но одна штука в нем точно полезна и на первых порах иногда даже незаменима. Вот как можно легко добавить ссылку на литературу в Quarto. При этом Quarto создает нам список литературы в формате БибТеХ или CSL. В дальнейшем мы можем добавлять литературу в него таким же образом или редактировать вручную, например, скопировав запись на сайте публикации. Если вы не знакомы с такими форматами списков литературы, это хороший способ его изучить. Добавьте несколько ссылок через редактор, затем научитьесь создавать и редактировать такие файлы самостоятельно. Надеюсь, вам это еще пригодится!

А вот как можно добавить что-нибудь, набрав слэш.

[Коллеги, есть ли вопросы по тому, что мы сейчас делали?]{style="color:#d00;"}

Давайте вернемся к презентации.
:::

## Модульный дизайн {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]
:::

## Модульный дизайн {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами] Речь идет просто о том, что можно включать ноутбук Quarto в другой ноутбук Quarto.

Это в Quarto называется shortcodes. Кстати, синтаксис Quarto работает на разных уровнях, в том числе внутри блоков кода. Для того, чтобы избегнуть исполнение этого кода, нужно заключить его в дополнительную пару фигурных скобок. Другой вариант – добавить команду {shortcodes=false} в опциях ячейки кода (в фигурных скобках).

Именно так сделана и эта презентация. Например, у нее есть рабочая версия, версия для мультиплекса и версия для сохранения в PDF. Весь контент находится только в одном файле, остальные его только заимствуют.
:::

## Модульный дизайн {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

А еще можно создавать разные отчеты из одного ноутбука, меняя только параметры, влияющие на исполнение кода.

А выглядит это примерно так

Параметры располагаются на верхнем уровне YAML-преамбулы (это явление вам уже знакомо по Rmarkdown, но мы еще разберем его ниже, потому что роль YAML в Quarto только усилилась) и называются именно `params`. А названия самих параметров должны соответствовать названиям переменных в R, Потому что в основном через R мы к ним и обращаемся (то же справедливо, если мы работаем в Python или Julia). То есть, дефисы в названии недопустимы, в отличие от обычных YAML-опций. А вот кавычить строки не обязательно: в большинстве случаев Quarto разбирается, что строка.
:::

## Модульный дизайн {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

А так мы это можем реализовать в коде: `params` будет списком R.

Затем из одного ноутбука мы можем сверстать документы с разными параметрами: в командной строке или в R.
:::

## Модульный дизайн {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.tinytext .r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Из преимуществ модульного дизайна для нас самым важным, наверное, является четвертое. Ссылаться на один готовый ноутбук в нескольких местах гораздо проще и безопаснее, чем копировать и вставлять.

::::::{style="color:#d00;"}
**А теперь давайте попробуем сверстать такой файл.**

Переходим в RStudio.

У нас есть база данных вакансий по ряду профессий, полученная из API сервиса HeadHunter. Кажется, там 7 наименований. Это часть моего старого учебного проекта, но я не придумал ничего интересного с другими доступными датасетами. Этот ноутбук я приложу к материалам занятия вместе с данными и скриптом предобработки.

[Открывает salaries.qmd]

Допустим, вот так выглядит наш отчет. Во-первых, тут много настроек отображения, с ними мы еще познакомимся. Во-вторых, вот он наш параметр (значение параметра area у нас в данных только одно). А теперь давайте посмотрим, где в коде есть обращение к этому параметру. Как видим, прежде всего он встречается в фильтрации базы данных. То есть все дальнейшие операции с данными будут операциями с данными именно по этой профессии. Также обращения к параметрам есть в тексте (обратите внимание, они тоже через R!) и в заголовках графиков.

Допустим, мы хотим создать некий отчет по каждой из профессий (не по всем сразу). И теперь нам не нужно делать семь практически одинаковых файлов. Мы сделаем один, а затем сверстаем семь документов.

**Коллеги, есть ли вопросы по тому, что мы сейчас делали в RStudio?**
::::::

Давайте вернемся к презентации.

:::

## Расширенное форматирование {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Воспроизводимый анализ – как раз то, ради чего люди делятся ноутбуками с кодом вместо того, чтобы просто опубликовать статью. Quarto как раз заточен под такие публикации, где есть формулы и список литературы, где изображения и таблицы пронумерованы и на них тоже можно ссылаться.

Вот пример «сырого» латеха. Библиотека уже прилагается к дистрибутиву Quarto.
:::

## Что со всем этим делать? {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Хочу обратить ваше внимание на то, что материал по Quarto практически необъятен для одной лекции.

Цитата: существует *слишком много* способов настроить Quarto, Настройки в YAML избыточны.

И тем не менее, наша цель сегодня в том, чтобы вы могли записать себе в навыки пункт Quarto.

Повторюсь: достаточно будет, если вы будете в курсе того, что *в принципе* можно сделать в Quarto. И будете знать как *в принципе* это сделать. Например, не обязательно, чтобы у вас от зубов отскакивало, например, как расположить изображения в шахматном порядке. Но желательно, чтобы про некоторые фичи вы помнили, что можно сделать и так. И тогда крутизна отчетов, которые вы сможете создавать в Quarto, будет ограничена только вашей усидчивостью.
:::

# Алгоритм работы {background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Коллеги, мы с вами рассмотрели, что такое утилита Quarto и что она нового нам предлагает. Есть ли у вас вопросы в связи с этим?]{style="color:#d00;"}
:::

## Общий алгоритм проектов Quarto {.scrollable background-image="images/slide.jpg" background-size="contain"}

::: {.tinytext .r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

На самом деле, нет никакого жесткого алгоритма. Но мы постараемся весь этот темный лес упорядочить. Чтобы у нас создание проектов больше было похоже на поваренную книгу, как сейчас модно говорить.

Определитесь, что вы будете делать. Quarto поддерживает верстку многих форматов из одного ноутбука, но к сожалению не все полностью переносимо. Именно поэтому обычно опции указывают отдельно для каждого из форматов.

Следующие шаги вам известны по Rmarkdown. Но мы все равно слегка их коснемся. Конечно, markdown все тот же, но в Quarto принято использовать синтаксис pandoc где возможно, вместо HTML.

Отображение элементов можно настраивать как в теле ноутбука, так и возвращаясь к заголовкам. Это самая обширная сфера информации про Quarto.

Смотрим на нативную поддержку диаграмм (графов, флоучартов и т. д.). В Quarto, как я уже говорил можно взять и написать диаграмму на mermaid или Graphviz. Здесь пример флоучарта, написанного на mermaid. Очень базовый пример, с базовым оформлением. Добавлено только одно определение класса, чтобы не было совсем скучно и вы увидели, что так можно делать.
:::

## Общий алгоритм проектов Quarto {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Кстати, в блоках кода `mermaid` опции начинаются с двух знаков процента, как в самом `mermaid`

[Графы Graphviz я планировал показать дальше. Коллеги, есть ли у вас вопросы по диаграмме mermaid?]{style="color:#d00;"}

*Добавлю только, что по умолчанию в формате HTML русалочья диаграмма загружается в своем родном формате — как элементы на странице. В них можно выделять и копировать текст, они адаптируются под изменения размера окна и так далее. В других форматах диаграмма добавляется в виде изображения `.png`. Формат mermaid можно настроить, указав, например, `svg` или `png` для HTML, если вам будет мешать чрезмерная гибкость нативного формата.*
:::

## Как работает Quarto {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.tinytext .r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Немного остановимся на том, что происходит «под капотом», когда мы верстаем документы из ноутбуков Quarto. Это пригодится вам, когда вы будете создавать свои сложные, кастомизированные, документы: если что-то пойдет не так, как вам нужно, вы сможете разобраться, на каком этапе происходит ошибка.

Напомню, что `pandoc` — программа, конвертирующая документы между разными форматами, на что и намекает ее название.

Что здесь нового по сравнению с Rmarkdown?

1. Во-первых, возможность верстать документы, сгенерированные в Jupyter Notebook. Python сейчас можно запускать и в RStudio, но кому-то Jupyter просто привычнее. Кроме того, Julia на данный момент намного проще запускать именно в Jupyter.

Конечно, для генерации документов с кодом нам потребуется соответственно R для «Нитр» и Python для Jupyter. Но если у вас уже есть документ в формате markdown (напомню, это статичный документ: на втором шаге Нитр или Юпитер жестко кодируют в markdown вывод, сгенерированный кодом: строят markdown-таблицу, если это таблица или датафрейм, а если это диаграмма — сохраняют ее как изображение в отдельный файл и вставляют ссылку) — так вот, если у вас уже есть статичный документ, то для его верстки в любой формат вам понадобится только Quarto.

2. Потому что, во-вторых, Rmarkdown использует на четвертом шаге при работе с `pandoc` команды R для управления процессом, в частности, условные операторы. Quarto использует команды, написанные на языке Lua, как указано на диаграмме. Фильтры на Lua поставляются нам вместе с Quarto. Благодаря этому начиная с этапа с markdown-документом мы не зависим от R.
:::

## Типы проекта {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Это типы проектов, которые можно создать из меню RStudio. Если мы нажмем «создать», то у нас в заголовке уже будут прописаны соответствующие опции.
:::

## Типы проекта {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[**А теперь давайте сверстаем наш проект сразу в нескольких форматах. <…> Если форматов несколько, определение каждого  из них должно иметь тип списка, как мы бы сказали в R, или объекта, как это называется в языке разметки YAML. Это значит, что у них должны быть какие-то значения. Если мы не знаем, что написать, пишем `default`**]{style="color:#d00;"}

[Коллеги, есть ли у вас вопросы по тому, как из одного ноутбука сверстать несколько форматов документов?]{style="color:#d00;"}]
:::

## Типы проекта {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Если мы запрашиваем использование библиотек Латех в заголовке ноутбука или во внешней инструкции, Quarto (как и Rmarkdown) ищут и загружают их для нас.

А если тайнитех уже установлен, стоит время от времени запускать `quarto update tinytex`. Каждый год в апреле TeXlive, разработчики тайнитех, обновляют репозиторий библиотек, после чего прошлогодние версии движка не смогут скачивать библиотеки. Поэтому обновлять его все равно понадобится.
:::

# Элементы Quarto: контент и оформление {background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Коллеги, мы посмотрели, документы каких форматов в принципе можно создавать в Quarto, а также как работает Quarto «под капотом». Есть ли у вас вопросы по этой информации?]{style="color:#d00;"}

Тогда двигаемся дальше – там будет интереснее.
:::

## Структура ноутбука {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

В эту картинку я постарался вместить как можно больше разных элементов типичного ноутбука, поэтому она получилась трудно читаемой. Но нас сейчас интересует не его конкретное содержание, а структура. Это как вид на город из иллюминатора самолета. С markdown, блоками кода и Латехом вы уже умеете работать. Другие элементы мы рассмотрим подробнее дальше.

Кстати, в блоках кода изменились правила оформления. Опции внутри фигурных скобок поддерживаются, но от них постепенно отказываются впользу опций внутри блока, которых может быть пара, а может быть и дюжина.

**Коллеги, дальнейшие слайды разработаны так, чтобы в случае необходимости послужить вам шпаргалкой или напоминанием. На некоторых из них мы не будем долго останавливаться. Если только вы не попросите рассказать подробнее или показать пример.**
:::

## YAML-заголовки {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Заголовок в формате YAML – это то место, где хранятся глобальные настройки всего нашего ноутбука или целого сайта.

Опции Quarto делятся на:

- общие;
- формат-специфичные (записываются под `format: [ваш формат]:`.

То, что указано для одного формата, не будет работать для другого, если вы не добавите эти же параметры в этот формат или не сделаете их общими. Да, так тоже можно.

Для каждого из форматов существует до нескольких десятков опций. Я вам сейчас скину список опций, классифицированный по форматам: (https://quarto.org/docs/reference/).
:::

## YAML-заголовки {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Вот шпаргалка на тему как передавать в YAML списки и многострочный текст.
:::

## YAML-заголовки {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Мы можем обратиться к метаданным проекта внутри ноутбука и использовать его как текст или как ссылку. Это делается через синтаксис Quarto, как и при включении внешнего ноутбука: две пары фигурных скобок, а внутри них пара угловых.

В данном случае мы использовали название автора документа и ссылку на изображение.

Этот синтаксис, как и команда включения стороннего файла, называется шорткод (`shortcodes`). Обращение к метаданным в шорткодах обозначается ключевым словом `meta`. Вложенные параметры (в подразделах) можно получить, используя в качестве разделителя точку. Как в Питоне например. В нашем примере это `format` затем `revealjs`, затем `logo`.
:::

## YAML-заголовки {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

То же можно делать для любых произвольных переменных, в том числе списков, которые вы можете поместить в файл `_variables.yml`. Пользуясь случаем, напомню, как меня зовут.

Можно поместить их в параметры и писать `meta`, но на это ругается рендерер (выдает предупреждение), значит, видимо, лучше этого не делать. *Стараемся быть zero warning. В R это не принципиально, но если наш проект компилируется или рендерится, лучше следовать культуре zero warning.*

https://helloacm.com/zero-warning-culture-in-development-team/
:::

## Пример настройки: HTML {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]

Что мы тут видим? Внешний вид большинства элементов, шрифты и цвета можно настроить в YAML-заголовках. Все остальное можно прописать во внешнем css-файле.

Для большинства некоммерческих отчетов в формате HTML неплохо подойдут темы семейства Bootswatch. Их можно указывать просто по названию, Quarto сам их находит. Я кину вам ссылку в чат, можете посмотреть галерею: https://bootswatch.com/
:::

## Пример настройки: PDF {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.tinytext .r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]

Что мы тут видим? Шрифты, цвета гиперссылок и отдельно ссылок внутри документа (citecolor) и даже размер бумаги. A5, как в каокй-нибудь настоящей статье.

И возможность передать дополнительный опции Латеха текстом или файлом. Обычно они нужны для загрузки дополнительных библиотек или определения пользовательских функций.

[А сейчас я вам расскажу, для чего тех-скрипт вам точно понадобится. Речь идет о подводных камнях с форматом PDF (и, соответственно, презентациями Beamer). Давайте перейдем в RStudio]{style="color:#d00;"}

[Давайте добавим в наш документ немного текста на русском. <…> Смотрите, что получается. Это очень старая проблема, унаследованная еще от Rmarkdown]{style="color:#d00;"}

Вместо `text` можно передать на включение файл `.tex` с загрузкой библиотек, шрифтами и определениями собственных функций. В силу того, что TeX далеко не всегда дружит с кириллическими текстами, я советую иметь под рукой TeX-код Данила Федоровых: https://ru.overleaf.com/latex/templates/5-dot-2-2-russkii-iazyk-v-latex-xelatex/skfzmvgdgvnk.

[Добавим команды из файла Федоровых]{style="color:#d00;"}]

[**Коллеги, есть ли у вас вопросы по настройке формата PDF?**]{style="color:#d00;"}]

Тогда давайте вернемся к презентации
:::

{{< include otus-question.qmd >}}

## Фрагменты кода {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]

Если вы смотрите презентацию в браузере – пощелкайте по темному треугольнику. Получается свернуть и развернуть код?
:::

## Фрагменты кода {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Опция `code-line-numbers` позволяет компактно записать последовательность подсвечиваемых строк кода. **Обратите внимание:** в зависимости от того, чему равно значение echo (показывать ли код и если показывать, то вместе с «забором» или нет) номера строк могут отличаться от того, что кажется нам. Подсвечивание строк желательно всегда проверять.

Если вы в своем отчете активно делитесь кодом, вы, возможно, захотите настроить внешний вид блоков кода. Для этого есть набор опций, как приведено на слайде. Выбраны по наитию два похожих цвета, из которых один насыщенее другого. Получилось как-то так.
:::

## Контейнеры pandoc {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]

В Quarto есть ряд готовых классов контейнеров. В том числе так называемые выноски (callout). Одну из них вы видите перед собой. Кроме Note есть Danger, Success, Warning. Знакомые названия для пользователей Shiny.

Кстати, с PDF не все всегда просто. Некоторые фрагменты могут выглядеть так же, как в HTML, например, те же блочные контейнеры со встроенными в Quarto классами, как выноски. Потому что они прописаны и для `pandoc`. Но чаще всего манипуляции со стилями CSS не отражаются на PDF-документах.
:::

## Контейнеры pandoc {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Почти то же самое для строчных контейнеров, но квадратные скобки вместо забора из двоеточий.

Я написал «При работе в Quarto рекомендуется». Почему рекомендуется? Синтаксис `pandoc` более универсален, чем HTML. Quarto старается переносить прописанные нами параметры во все форматы документа. Получается не всегда.
:::

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Форматирование изображений – как в Rmarkdown.
:::

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Вставка изображений мало чем отличается от Rmarkdown. Но дальше мы увидим, как Quarto сам создает перекрестные ссылки на изображения.
:::

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

{{< include crossref-ru.qmd >}}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

И что у нас тут получается? С раскладкой более-менее понятно. А еще: мы не просили явно, но у нас появилась подпись «Рис. 2». Почему? Это работает при условии, что блок с изображениями носит название, начинающееся с `fig-`.
:::

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.tinytext .r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

В качестве макета можно указать массив, каждый элемент которого – ряд в сетке. К понятию сетки мы будем иногда возвращаться.

Сетка, grid, вам уже знакома по Shiny. По умолчанию весь документ разверстан строками и колонками. Просто таким синтаксисом, как в этом примере, мы явно управляем размещением элементов, а в остальное время Quarto решает за нас. Как правило, просто помещая следующий элемент на следующую строку.

Отрицательные значения в массиве добавляют пространство между соседними колонками в ряду.

Так можно распределять по сетке (grid) не только изображения, но и текст, диаграммы и все остальное. Просто каждый следующий элемент (например, строку markdown, то есть отделенную пустым абзацем, заголвок markdown, фрагмент кода или таблицу) помещается в следующую ячейку сетки: сначала в том же ряду, затем в следующем и так далее.
:::

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Про `fig-` мы уже говорили.

А еще в настройках проекта можно изменить префиксы перекрестных ссылок.

Например, если мы пишем по-русски, можно перевести префиксы на русский. К сожалению, нумерации из кириллических букв нет.
:::

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Обратите внимание, параметры, которые указываются внутри блоков кода, пишутся немного по-другому: как YAML, через двоеточие. А еще то, что в блоках мы указываем без имени, например, подпись или название, здесь нужно называть, как `fig-cap`, например.

Здесь мы указали, что первая гистограмма размещается в колонке, которая в два раза шире, чем у второй. Это, разумеется, не имеет смысла, если одно изображение на самом деле не шире другого.

Обратите внимание: здесь изображения не пронумерованы: для того, чтобы они были пронумерованы, необходимо дать блоку кода название, начинающееся с `fig-`
:::

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

На этот раз изображения пронумерованы.
:::

## Диаграммы {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

С диаграммами `mermaid` мы уже знакомы.

Graphviz тоже стоит изучить, если вы хотите использовать графы и блок-схемы. D Quarto блок Graphviz обозначается кодом `{dot}`. Graphviz изначально написан на C, поэтому комментарии там отделяются двумя слешами, а опции кода — двумя слэшами с вертикальной чертой. Это второе исключение в Quarto (первое – mermaid).
:::

## Диаграммы {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Вот такой глупый граф. Но, согласитесь, вручную обычно прописывают не очень большие графы. Для больших у нас есть функции в R.
:::

## Интерактивные элементы {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

В HTML и основанные на HTML форматы можно добавлять интерактивные элементы. В других форматах Quarto постарается сделать скриншот и вставить стационарную картинку, но может не получиться или получиться не так, как нам надо. **Будьте внимательны!** Причем в офисных форматах (`docx`, `pptx` получается лучше, чем в PDF)

А лучше всего для PDF делать скриншот и вставлять стационарную картинку.

Капризному (на самом деле пытающемуся быть суперадаптивным) формату `plotly` лучше явно прописывать размеры.
:::

## Интерактивные элементы {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Посмотрим, что у нас получилось. Если вы смотрите интерктивную презентацию в браузере, можете пошевелить и повертеть эту диаграмму.
:::

## Интерактивные элементы {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Можно добавить интерактивную карту, например, в формате `Leaflet`.
:::

## Интерактивные элементы {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Вот что у нас получилось. Если вы смотрите интерктивную презентацию в браузере, можете подвигать карту, а если нажать на маркер, всплывет текст, который мы прописали в коде карты.
:::

## Макеты страниц {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]

В макете типа «статья» контент по возможности центрирован и занимает по ширине не более 700 пикселей.

Grid, решетка – это, как вы, наверное, видели в Shiny, упорядочивание содержимого страницы по строкам и столбцам. В раскладке `full` этого нет, элементы просто следуют один за другим, поэтому вам придется позаботиться о структуре самим (например, используя CSS Grid) и как минимум задать поля (`margin-top` и прочие).

Коллеги, то, о чем мы говорим сейчас, применяется идеально к HTML. Для форматов, основанных на ТеХ, Quarto старается, но не всегда справляется. При том, что вообще изменение раскладки для них не предусмотрено.
:::

## Макеты страниц {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

::: {.tinytext .r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Помимо общей для документа раскладки можно «делать исключение» для отдельных фрагментов. В теле ноутбука положение, как и любая особая верстка, оформляется в свойствах контейнера. В блоке кода – параметром `column`.

На всю или почти всю ширину часто размещают карты. На полях можно размещать формулы, примечания и т. п. Есть еще несколько видов ширины блока, тем или иным образом выходящего за рамки тела статьи: `body-outset`, `page` и др.

[В презентацию трудно вставить то, как выглядят эти фрагменты, а тем более, чем они отличаются от обычных. Так что давайте поэкспериментируем в RSTudio]{style="color:#d00;"}

На полях можно автоматически размещать ссылки и примечания:

```yaml
---
reference-location: margin
citation-location: margin
---
```

[**Коллеги, есть ли у вас вопросы?**]{style="color:#d00;"}

Возвращаемся к презентации
:::

## Макеты для интерактивного взаимодействия {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

Если вы используете интерактивные элементы с возможностью управления их отображения пользователем (как в Shiny), можно использовать раскладку, облегчающую интерактивное взаимодействие:

## Макеты для интерактивного взаимодействия {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Обычно, если вы используете интерактивные элементы с возможностью настройки, как в Shiny или Observable, имеет смысл поместить элементы управления наверх (`panel-input`) или сбоку (`panel-sidebar`).
:::

## Условный контент {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]

Если ноутбук предполагает несколько форматов документа. Мы с вами уже видели, что это обычная практика.

Соответственно, можно написать, например, `.content-visible unless-format="pdf"` и так далее.

Наверное, вы уже догадались, как создать ноутбук, из котором на одном и том же месте загружается, скажем, интерактивная диаграмма plotly в формате HTML и статичный ggplot в формате PDF? [Пожалуйста, скажите голосом или напишите в чат, как этого добиться?]{style="color:#d00;"}
:::

## Условный контент {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

::: {.tinytext .r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Эту таблицу стоит понимать буквально. Если вы скроете контент для формата `HTML`, то он не будет виден ни на сайте, ни в презентации `revealjs`, ни в электронной книге `epub`. Если вместо этого вы напишите `.content-hidden when-format="html:js"`, то контент в блоке не будет виден ни на HTML-страницах и, соответственно, на сайтах, ни в презентациях `revealjs` вроде этой (то есть, в форматах, которые допускают интерактивные элементы), но будет виден в книгах `epub`.

Ну и напомню, что Quarto динамично развивается. Условный контент в зависимости от формата – это отлично. Надеюсь, они со временем добавят больше условий, например, зависимость от другого контента, стиля и т. д.

Вообще многое им еще предстоит. Например, многие YAML-команды работают и в заголовке, и во фрагментах кода, но некоторые работают только из заголовка. Или, например, обращение к метаданным и включения: можно было бы расширить их функционал, например, тоже добавить условные выражения. Если вам нравится Quarto, стоит следить за его развитием.
:::

## Видео {.smaller .scrollable background-image="images/slide.jpg" background-size="contain" style="font-size:0.6em;"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Можно вставлять видео по url или из локального файла.
:::

# Комплексные публикации {background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Коллеги, мы с вами посмотрели много вариантов добавления элементов в наш ноутбук Quarto и вариантов настройки их отображения для разных форматов. В теории, а кое-что и на практике. Есть ли у вас вопросы по тому, что мы с вами видели? Например, нужно ли показать еще что-нибудь из этого в RStudio?]{style="color:#d00;"}

Переходим к созданию сложных проектов на примере вебсайтов.
:::

## Сайты, блоги, книги {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Мы рассмотрим проект на примере вебсайта.
:::

## Создание сайта в Quarto – Заготовка {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

На слайде показано, как создать проект в RStudio,


[А мы с вами перейдем туда и создадим сайт]{style="color:#d00;"}

Необходимые файлы – это `_quarto.yml`, в котором хранятся настройки проекта, в том числе параметры отображения, общие для всех документов. index.qmd, который сверстается в index.html, тоже необходим любому сайту. Также для примера добавлен шаблон страницы About и пустой файл со стилями.

Вернемся в презентацию.
:::

## Создание сайта в Quarto – Метаданные {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]

Здесь мы видим:

1. Определение типа проекта (тут могут быть и другие параметры проекта).
2. Описание элементов сайта (в данном случае только верхняя навигационная панель).
3. Праметры формата страниц – как и для отдельных ноутбуков.
:::

## Создание сайта в Quarto – Навигация {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]
:::

## Создание сайта в Quarto – Навигация {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]

Здесь мы видим описание верхней навигационной панели:

1. Заголовок и логотип
2. Элементы слева (как правило, ссылки на страницы сайта, то есть навигация).
3. Элементы справа (как правило, внешние ссылки)

[Давайте добавим такую панель на наш сайт]{style="color:#d00;"}
:::

## Создание сайта в Quarto – Навигация {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]

Здесь мы видим описание боковой навигационной панели:

1. Цвета оформления
2. Указание на то, что панель должна быть прикреплена к краю, а не плавать
3. Разделы и ссылки на файлы, из которых будут сверстаны страницы, на которые будут ссылки на боковой панели.

[Давайте добавим такую панель на наш сайт. Нам придется создать пару, то есть 4, файла для примера меню]{style="color:#d00;"}
:::

## Создание сайта в Quarto – Навигация {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Можно добавить и подвал, иначе футер.
:::

## Создание сайта в Quarto – Навигация {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Давайте добавим поисковый виджет]{style="color:#d00;"}

[Читает слайд своими словами]

Тип: overlay – иконка со всплывающим виджетом, textbox – стандартный text input
:::

## Создание сайта в Quarto – Рендеринг {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Если мы создали проект Quarto в RStudio, нам будет доступен предпросмотр сайта.

[Читает слайд своими словами]
:::

## Создание сайта в Quarto – Публикация {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Из Quarto сайт можно опубликовать на некоторых платформах, а если заморочиться, то и на своем сервере. Разумеется, понадобится аккаунт той платформы, на которой вы хотите разместиться.

Далее, у каждой платформы свои особенности и требования, например, к названию папки, где хранятся сверстанные страницы, как мы увидим на примере GitHub.
:::

## Создание сайта в Quarto – Публикация {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

Вот так можно разместить сайт на страницах GitHub. Если вам понадобится так сделать, то можете обратиться к этим слайдам, как к руководству. Ну а мы закончим на этом с новым материалом.
[Объясняет каждый шаг `git`]
:::

## Создание сайта в Quarto – Публикация {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

А вот так нужно настроить сайт на стороне GitHub.

[Читает слайд своими словами]
:::

# Рефлексия {background-image="images/section.jpg" background-size="contain"}

## Рефлексия {.smaller background-image="images/slide.jpg" background-size="contain"}

[Спросите себя. Расскажите в чате или голосом:]{.absolute top="90" left="52" style="color:#FF9900 !important;"}

::: {.absolute top="180" left="52"}
1. [Хотите ли вы применять Quarto в своей работе?]{}
2. [Считаете ли вы, что это сложно?]{}
3. [О каких еще возможностях системы вы хотите узнать?]{}
4. [Какой проект вам хочется оформить в Quarto первым? В каком формате вы бы его сверстали?]{}
:::

::: {.r-fit-text}
[Внимание на чат!]{style="color:#d00;"} *Медленно. Акцентированно. Четко. С интонацией. Без отсебятины.*

[Читает слайд своими словами]
:::

{{< include bye.qmd >}}