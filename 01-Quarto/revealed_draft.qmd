---
title: "Язык R для анализа данных"
subtitle: "Утилита формирования отчётов Quarto"
author  : "otus.ru"
title-slide-attributes:
  data-background-image: slides/title.jpg
  data-background-size: contain
# date    : 2023-06-13
format:
    revealjs:
      theme: ../tools/otus.scss
      logo: slides/owls_R.png
      incremental: true
      width: 960
      height: 540
      transition: convex
resource-path: 
  - "/slides"
default-image-extension: "png"
author-name: Андрей Павлюченко
author-role: Старший медиааналитик
author-job : "Мониторинг и исследования медиа (Brand Analytics, Медиалогия, R, Python)"
author-likes: "Люблю делать: Text Mining, графовый анализ, интерактивные дэшборды"
author-contact: "+7 915 254-87-83 / a.pawluczenko@gmail.com / @a.pawluczenko"
---

{{< include common.qmd >}}

# Знакомство с Quarto {background-image="slides/section.jpg" background-size="contain"}

## Что за Quarto? {.smaller background-image="slides/slide.jpg" background-size="contain"}

Quarto (отсылка к формату `in quarto`) -- система публикации документов от Posit (бывшая RStudio, создатели `Tidyverse`).

::: {layout-ncol=2}
![](slides/quarto){width=300 alt="Логотип Quarto" title="Логотип Quarto"}

![](slides/posit2){width=300 alt="Логотип Posit"  title="Логотип Posit"}
:::

Quarto -- не библиотека R, а автономное приложение с интерфейсом командной строки. Например, даже без установленных R или Python вы можете:

1. [Создать документ `document.md` в своем любимом редакторе.]{}
2. [Добавить YAML-метаданные (как Rmarkdown, но см. ниже).]{}
3. [Сверстать документ в нужном вам формате.]{}

. . .

```       
quarto render document.md
```

## Что за Quarto? {.smaller background-image="slides/slide.jpg" background-size="contain"}

RStudio IDE новых версий включает Quarto, а также предоставляет для него редактор кода с автозаполнением и удобный визуальный редактор.

Quarto имеет более широкие по сравнению с Rmarkdown возможности. Можно воспринимать его как:

 

-   [Rmarkdown++;]{}
-   [MS Word с гибридным интерфейсом;]{}
-   [Dreamweaver для аналитиков и ученых.]{}

## Что нового: не только R {background-image="slides/slide.jpg" background-size="contain"}

Quarto умеет обрабатывать код на следующих языках:

-   [R;]{}
-   [Python;]{}
-   [Julia;]{}
-   [JavaScript (Observable).]{}

![](slides/languages)

## Что нового: многоформатность {.smaller background-image="slides/slide.jpg" background-size="contain"}

Quarto поддерживает множество форматов вывода, включая HTML, PDF, EPUB и другие. В Rmarkdown для большинства этих форматов необходимы дополнительные библиотеки:

| **Возможности Quarto**    | **Реализация в Rmarkdown** |
|---------------------------|----------------------------|
| HTML                      | ✓                          |
| PDF                       | ✓                          |
| DOCX/ODT                  | ✓                          |
| PowerPoint                | ✓                          |
| сайт/блог                 | `distill`, `blogdown`      |
| HTML-презентация          | `revealjs`                 |
| книга                     | `bookdown`                 |
| интерактивная презентация | `flexdashboard`            |

## Что нового: модульный дизайн {.smaller background-image="slides/slide.jpg" background-size="contain"}

Quarto позволяет разбивать анализ на маленькие, повторно используемые компоненты, которые можно собирать в сложные документы. Это делает повторное использование и комбинирование частей вашего анализа легким.

Сложный проект на R может состоять из нескольких скриптов, содержащих загрузку и предобработку данных, специальные функции, моделирование и визуализацию. Quarto позволяет точно так же использовать файлы `.qmd`: собирать их в большие проекты, использовать вывод одной ячейки кода много раз.

Пример: включить все объекты из файла `_data.qmd`

```         
{{< include _data.qmd >}}
```

## Что нового: модульный дизайн {.smaller background-image="slides/slide.jpg" background-size="contain"}

Quarto позволяет использовать параметры, c которыми можно готовить разные отчеты из одного и того же документа, например:

-   [отчеты для разных регионов;]{}
-   [отчеты для разных периодов;]{}
-   [моделирование с разными допущениями или алгоритмами.]{}

. . .

``` yaml
---
title : "Hello, Quarto"
author: "otus.ru"
…
params:
  job : "Бухгалтер"
  area: "Москва"
---
```

## Что нового: модульный дизайн {.smaller background-image="slides/slide.jpg" background-size="contain"}

Значения параметров используются в качестве шаблона в коде документа, например:

```{r params-example}
#| echo: true
#| eval: false
#| code-line-numbers: "3,4"
df_meta <- open_dataset('data/db/meta', partitioning = 'job_id') |>
  filter(
    job == params$job,
    area = params$area
  )
```

Затем документ можно сверстать с разными параметрами из R или командной строки:

```         
quarto render doc.qmd -P job:"Бухгалтер" -P area:"Москва" --output doc.pdf
```

## Что нового: модульный дизайн {.smaller background-image="slides/slide.jpg" background-size="contain"}

Некоторые преимущества модульных документов включают:

1. [Повторное использование: можно повторно использовать те же ячейки в нескольких документах.]{}
2. [Гибкость: можно повторно комбинировать ячейки разными способами для разных выводов или целей.]{}
3. [Абстракция: скрывать детали реализации от читателей документа.]{}
4. [Удобство поддержки: нужно вносить изменения только в одном месте.]{}

## Что нового: расширенное форматирование {.smaller background-image="slides/slide.jpg" background-size="contain"}

Quarto изначально включает все необходимое для научных публикаций и [воспроизводимого анализа](https://habr.com/ru/articles/417469/):

-   [обширную поддержку перекрестных ссылок и цитат;]{}
-   [расширенное аннотирование рисунков, таблиц и кода;]{}
-   [нативную поддержку графов и блок-схем (`mermaid` и `Graphviz`);]{}
-   [расширенные возможности написания формул $\LaTeX$.]{}

. . .

::: {.columns}
::: {.column width="40%"}
**Пример**: Запись матрицы (пакет `amsmath`)

```
$$A = \begin{pmatrix}
    4&-3&-3\\
    1&2&1  \\
    1&1&2
  \end{pmatrix}$$
```

:::

::: {.column .output width="40%"}

$$A = \begin{pmatrix}4&-3&-3\\1&2&1\\1&1&2\end{pmatrix}$$
:::

:::

## Что со всем этим делать? {.smaller background-image="slides/slide.jpg" background-size="contain"}

Quarto «из коробки» позволяет создавать более 40 форматов документов (`format: ваш-формат`).

Для каждого формата доступны по нескольку десятков опций.

Знание CSS/SASS, $\LaTeX$ или Pandoc дает почти безграничные возможности настройки внешнего вида отчетов.

. . .

<br>

Так что, «читайте руководство»?

. . .

<br>

Безусловно. Но сейчас вы получите карту для ориентации во вселенной Quarto.

И сделаете по ней уверенные шаги.

# Алгоритм работы {background-image="slides/section.jpg" background-size="contain"}

## Общий алгоритм проектов Quarto {.scrollable background-image="slides/slide.jpg" background-size="contain"}

```{mermaid quarto-general}
flowchart LR
  A{Выбираем тип проекта} --> B(Редактируем YAML)
  B --> C(Пишем текст и код)
  B --> D(Добавляем изображения)
  C --> E(Настраиваем отображение)
  D --> E
  E <--> B
  E --> F[Публикация]
  
  classDef optional stroke-dasharray:10;
  class D optional
```

. . .

Кстати, код диаграммы:

```{mermaid quarto-general-code}
%%| echo: fenced
%%| eval: false
flowchart LR
  A{Выбираем тип проекта} --> B(Редактируем YAML)
  B --> C(Пишем текст и код)
  B --> D(Добавляем изображения)
  C --> E(Настраиваем отображение)
  D --> E
  E <--> B
  E --> F[Публикация]
  
  classDef optional stroke-dasharray:10;
  class D optional
```

## Как работает Quarto {background-image="slides/slide.jpg" background-size="contain"}

При работе с R система Quarto сначала создает markdown-документ, который затем конвертируется в нужный формат программой `pandoc`.

![](slides/how-it-works)

## Типы проекта {background-image="slides/slide.jpg" background-size="contain"}

```{mermaid quarto-types}
flowchart TD
 typeD>Документ]
 typeP>Презентация]
 typeI>Интерактивный HTML]
 
 formatPDF[PDF]
 formatHTML[Статичный HTML]
 formatWord[Word/ODT]
 
 formatPP[PowerPoint]
 formatRJS[Reveal JS]
 formatBeamer[Beamer]
 
 formatShiny[Shiny]
 formatOJS[Observable JS]
 formatHW[htmlwidgets]
 
 typeD --> formatPDF & formatHTML & formatWord
 typeP --> formatPP  & formatRJS &  formatBeamer
 typeI --> formatShiny  & formatOJS & formatHW
```

## Типы проекта {.smaller background-image="slides/slide.jpg" background-size="contain"}

::: {.callout-note}
Из одного документа можно сверстать несколько документов в разных форматах. При этом отображение можно настроить отдельно для каждого формата.
:::

```yaml
format:
  html:
    theme: pulse
  pdf:
    fig-format: png
```

::: {.callout-note}
Только формат HTML позволяет создавать интерактивные документы.

При этом компоненты Shiny требуют хостинга на удаленном сервере. Компоненты, основанные на JavaScript, будут интерактивными у читателей без дополнительных сложностей.
:::

##  {#slide-q data-menu-title="Вопрос" background-image="slides/slide.jpg" background-size="contain"}

[Интересно ваше мнение:]{.absolute top="90" left="52" style="color:#FF9900 !important;"}

::: {.columns layout-valign="bottom"}
::: {.column}
![](slides/rules-ask){.absolute top="177" left="103"}

![](slides/rules-ask){.absolute top="325" left="103"}
:::

::: {.column}

[Какой формат вам кажется самым интересным для работы?]{.absolute top="177" left="278"}

[Какой формат, по вашему мнению, вам больше всего пригодится в работе?]{.absolute top="325" left="278"}
:::
:::

# Элементы Quarto {background-image="slides/section.jpg" background-size="contain"}

## YAML-заголовки {.smaller background-image="slides/slide.jpg" background-size="contain"}

YAML («**Y**AML **A**in't **M**arkup **L**anguage») – язык сериализации данных, как JSON и XML. Используется Quarto для записи конфигурации проекта (как в R и Julia). Формат записи – `опция: значение`.

Код конфигурации YAML отделяется тремя дефисами сверху и снизу:

``` yaml
---
title : "Hello, Quarto"
author: "otus.ru"
format:
  pptx:
    reference-doc: ../templates/template.pptx
    mermaid-format: png
---
```

Опции Quarto делятся на:

- [общие;]{}
- [формат-специфичные (записываются под `format: [ваш формат]:`).]{}

::: {.notes}
Для каждого из форматов существует до нескольких десятков опций. Полный список есть на [сайте Quarto](https://quarto.org/docs/reference/).
:::

## YAML-заголовки {.smaller background-image="slides/slide.jpg" background-size="contain"}

К метаданным можно обращаться через синтаксис Quarto `{{…}}`:

```yaml
[{\{< meta author >}}]{style="font-family:Courier;font-size:3em;float:right;"}

![Otus разбирается в R]({\{< meta format.revealjs.logo >}}){#fig-otus-r-owl}
```

[{{< meta author >}}]{style="font-family:Courier;font-size:3em;float:right;"}

![Otus разбирается в R]({{< meta format.revealjs.logo >}}){#fig-otus-r-owl width=125}

::: {.notes}
Мне пришлось добавить обратную косую черту между первой парой фигурных скобок, потому что Quarto вычисляет значение своих переменных в любом окружении.
:::

## Фрагменты кода {.smaller background-image="slides/slide.jpg" background-size="contain"}

Как и для Rmarkdown, возможность интерпретировать код и встраивать результаты его исполнения в документ является основной функциональной особенностью Quarto.

В Quarto опции для отдельного фрагмента кода, если они нужны, записываются внутри блока в формате YAML и начинаются с `#|`:

```{{r}}
#| label: load-packages
#| include: false

library(tidymodels)
```

. . .

Можно спрятать код под спойлер:

```{r}
#| echo: fenced
#| code-fold: true
#| code-summary: 'Показать код'
x <- rchisq(1e3, 13)
```

## Фрагменты кода {.smaller background-image="slides/slide.jpg" background-size="contain"}

В Quarto очень легко подсвечивать строки кода:

. . .

```{r}
#| echo: fenced
#| code-line-numbers: "2-3|5|6"
#| eval: false

hist(x)
ggplot2::qplot(x, geom = 'histogram')
```

. . .

Также можно [выбрать или настроить](https://quarto.org/docs/output-formats/html-code) оформление кода

::: {layout-ncol=2 layout-valign="bottom"}

```yaml
---
format:
  html: 
    code-block-bg:          "#fef"
    code-block-border-left: "#faf"
    highlight-style:        breeze
execute: 
  echo: fenced
---
```

::: {.fragment}

![](slides/purple-code-breeze)

:::
:::

## Контейнеры pandoc {.smaller background-image="slides/slide.jpg" background-size="contain"}

При работе в Quarto рекомендуется использовать универсальный формат контейнеров `pandoc`

1. [Блочный контейнер – аналог `<div>` ограничивается двоеточиями (не менее 3) с опциональными атрибутами в фигурных скобках:]{}

. . .

```markdown
::: {style="border: 1px solid;font-size:0.2em;"}
Этот маленький текст будет окружен прямоугольной рамкой
:::

::: {.callout-note}
А это будет примечание
:::
```

::: {style="border: 1px solid;font-size:0.2em;"}
Этот маленький текст будет окружен прямоугольной рамкой
:::

::: {.callout-note}
А это будет примечание
:::

## Контейнеры pandoc {.smaller background-image="slides/slide.jpg" background-size="contain"}

При работе в Quarto рекомендуется использовать универсальный формат контейнеров `pandoc`

2. [Строчный контейнер – аналог `<span>` записывается в квадартных скобках, за которыми следуют атрибуты в фигурных скобках:]{}

. . .

```markdown
[Сначала id, потом класс, потом все остальное]{#id .class key1="val1" key2="val2"}

[Красный текст]{style="color:#d00;"}
```

[Красный текст]{style="color:#d00;"}

## Форматирование изображений {.smaller background-image="slides/slide.jpg" background-size="contain"}

Синтаксис изображений похож на гиперссылки, но с восклицательным знаком в начале:

```markdown
![Собачка](doge.png "Изображение собаки"){height=2cm}
```
![Собачка](slides/doge.png "Изображение собаки"){height=2cm}

Надпись в квадратных скобках считается подписью к изображению. Ее можно оставить пустой.

Текст в кавычках после url изображения – его всплывающее название (`<img … title=…>`)

## Форматирование изображений {.smaller background-image="slides/slide.jpg" background-size="contain"}

Можно добавлять атрибуты, например, выравнивание:

```markdown
![Собачка](doge.png "Изображение собаки побольше"){fig-align="left" fig-alt="Изображение собаки"}
```

![Собачка](slides/doge.png "Изображение собаки побольше"){width=200 fig-align="left" fig-alt="Изображение собаки"}

## Форматирование изображений {.smaller background-image="slides/slide.jpg" background-size="contain"}

Можно сгруппировать несколько изображений и расположить их определенным образом:

```markdown
::: {#fig-two-triangles layout-ncol=2}

![Первая картинка](tred.png){#fig-triangle-red width=20}

![Вторая картинка](tblue.png){#fig-triangle-blue width=20}

Две картинки
:::
```
{{< include crossref-ru.qmd >}}

::: {#fig-two-triangles layout-ncol=2}

![Первая картинка](slides/tred.png){#fig-triangle-red width=111}

![Вторая картинка](slides/tblue.png){#fig-triangle-blue width=111}

Две картинки
:::

## Форматирование изображений {.smaller .scrollable background-image="slides/slide.jpg" background-size="contain"}

В качестве макета можно указать массив, каждый элемент которого – ряд в сетке:

```markdown
::: {#fig-images layout="[[20,20], [40]]"}

![Первая картинка](quarto.png){#fig-01 width=40}

![Вторая картинка](quarto.png){#fig-02 width=40}

![Картинка во втором ряду](quarto.png){#fig-long width=80}

Три картинки
:::
```

::: {#fig-images layout="[[20,20], [40]]"}

![Первая картинка](slides/quarto){#fig-01 width=40}

![Вторая картинка](slides/quarto){#fig-02 width=40}

![Картинка во втором ряду](slides/quarto){#fig-long width=80}

Три картинки
:::

::: {.notes}
Отрицательные значения в массиве добавляют пространство между соседними изображениями в ряду.
:::

## Форматирование изображений {.smaller background-image="slides/slide.jpg" background-size="contain"}

Если назвать контейнер с изображениями `#fig-…`, Quarto представит его как одно изображение из нескольких частей (как на предыдущем слайде) и пронумерует соответсвенно.

На изображения можно ссылаться: @fig-two-triangles

Кстати, по умолчанию названия сопровождаются префиксом «Figure». Это можно изменить в настройках проекта:

```yaml
crossref:
  fig-title: Рис.         # (по умолчанию "Figure")
  tbl-title: Таб.         # (по умолчанию "Table")
  subref-labels: arabic   # (по умолчанию "a, b, …, z")
```
::: {.notes}
Например, можно перевести префиксы на русский. К сожалению, нумерации из кириллических букв нет.
:::

## Форматирование изображений {.smaller background-image="slides/slide.jpg" background-size="contain"}

Для изображений, генерируемых кодом, параметры задают внутри блока:

```{r}
#| echo: fenced
#| fig-cap: "Две диаграммы"
#| fig-subcap: 
#|   - "Первая диаграмма"
#|   - "Вторая диаграмма"
#| layout: [20, 10]
#| fig-width: 50

hist(mtcars$mpg)
hist(mtcars$disp)
```

::: {.notes}
Обратите внимание: здесь изображения не пронумерованы: для того, чтобы они были пронумерованы, необходимо дать блоку кода название, начинающееся с `fig-`
:::

## Форматирование изображений {.smaller background-image="slides/slide.jpg" background-size="contain"}

Блок кода, чье название начинается с `fig-`, генерирует пронумерованные изображения, на которые можно ссылаться:

```{r}
#| echo: fenced
#| label: fig-two-plots
#| fig-cap: "Две диаграммы"
#| fig-subcap: 
#|   - "Первая диаграмма"
#|   - "Вторая диаграмма"
#| fig-width: 50
#| layout: [10, 10]
hist(mtcars$mpg)
hist(mtcars$disp)
```

::: {.notes}
На этот раз изображения пронумерованы.
:::

## Интерактивные эелементы {.smaller background-image="slides/slide.jpg" background-size="contain"}

Формат HTML и производные от него (как revealjs) позволяют добавлять в документ интерактивные элементы семейства `htmlwidgets`

```{r}
#| label: example-plotly
#| fig-cap: ""
library(plotly)
library(dplyr)
library(forcats)

# Небольшая предобработка: сделаем категориальную переменную явно категориальной
mtcars <- mtcars |>
  mutate(am = fct_recode(as.character(am), 'Automatic' = '0', 'Manual' = '1'))

plot_ly(
  mtcars,
  x = ~wt,
  y = ~hp,
  z = ~qsec,
  color = ~am,
  colors = c('#BF382A', '#0C4B8E')
) |>
  add_markers()
```
