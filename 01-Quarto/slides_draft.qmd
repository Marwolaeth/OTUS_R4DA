---
title   : "Утилита формирования отчётов Quarto"
subtitle: "Язык R для анализа данных"
author  : ""
date    : 2023-06-13
format  :
  pptx  :
    reference-doc: ../tools/template.pptx
    incremental: true
    mermaid-format: png
    include-in-header:
      - text: |
          \usepackage{amsmath}
          \usepackage{mathtools}
          \usepackage{icomma}
          \usepackage{russlh}
resource-path: 
  - "../images"
default-image-extension: "png"
params:
  job : "Бухгалтер"
  area: "Москва"
execute:
  echo   : false
  eval   : true
  warning: false
---

## Webinar setup

Insert webinar setup slide here

## About

Insert about slide here

## Webinar rules

Insert webinar rules slide here

## Webinar path

Insert webinar path slide here

# Почему Quarto?

## Что за Quarto? (1 из 2)

Quarto (отсылка к формату `in quarto`) -- система публикации документов от Posit (бывшая RStudio, создатели `Tidyverse`).

Quarto -- не библиотека R, а автономное приложение с интерфейсом командной строки. Например, вы можете:

1.  Создать документ `document.qmd` в своем любимом редакторе.
2.  Добавить YAML-метаданные (как Rmarkdown, но см. ниже).
3.  Сверстать документ в нужном вам формате:

```       
quarto render document.qmd
```

## Что за Quarto? (2 из 2)

RStudio IDE новых версий включает Quarto, а также предоставляет для него редактор кода с автозаполнением и удобный визуальный редактор.

Quarto имеет более широкие по сравнению с Rmarkdown возможности. Можно воспринимать его как:

 

-   Rmarkdown++
-   MS Word с гибридным интерфейсом
-   Dreamweaver для аналитиков и ученых

## Что нового: не только R

Quarto умеет обрабатывать код на следующих языках:

-   R
-   Python
-   Julia
-   Observable

![](languages_grey)

## Что нового: множество форматов вывода «из коробки»

Quarto поддерживает множество форматов вывода, включая HTML, PDF, EPUB и другие. В Rmarkdown для большинства этих форматов необходимы дополнительные библиотеки:

| **Возможности Quarto**    | **Реализация в Rmarkdown** |
|---------------------------|----------------------------|
| HTML                      | ✓                          |
| PDF                       | ✓                          |
| DOCX/ODT                  | ✓                          |
| PowerPoint                | ✓                          |
| сайт/блог                 | `distill`, `blogdown`      |
| HTML-презентация          | `revealjs`                 |
| книга                     | `bookdown`                 |
| интерактивная презентация | `flexdashboard`            |

## Что нового: модульный дизайн (1 из 4)

Quarto позволяет разбивать анализ на маленькие, повторно используемые компоненты, которые можно собирать в сложные документы. Это делает повторное использование и комбинирование частей вашего анализа легким.

Сложный проект на R может состоять из нескольких скриптов, содержащих загрузку и предобработку данных, специальные функции, моделирование и визуализацию. Quarto позволяет точно так же использовать файлы `.qmd`: собирать их в большие проекты, использовать вывод одной ячейки кода много раз.

Пример: включить все объекты из файла `_data.qmd`

```         
{{< include _data.qmd >}}
```

## Что нового: модульный дизайн (2 из 4)

Quarto позволяет использовать параметры, c которыми можно готовить разные отчеты из одного и того же документа, например:

-   отчеты для разных регионов;
-   отчеты для разных периодов;
-   моделирование с разными допущениями или алгоритмами.

``` yaml
---
title : "Hello, Quarto"
author: "otus.ru"
…
params:
  job : "Бухгалтер"
  area: "Москва"
---
```

## Что нового: модульный дизайн (3 из 4)

Значения параметров используются в качестве шаблона в коде документа, например:

```{r params-example}
#| echo: true
#| eval: false
df_meta <- open_dataset('data/db/meta', partitioning = 'job_id') |>
  filter(job == params$job, area = params$area)
```

Затем документ можно сверстать с разными параметрами из R или командной строки:

```         
quarto render doc.qmd -P job:"Бухгалтер" -P area:"Москва" --output doc.pdf
```

## Что нового: модульный дизайн (4 из 4)

Некоторые преимущества модульных документов включают:

1.  Повторное использование: можно повторно использовать те же ячейки в нескольких документах

2.  Гибкость: можно повторно комбинировать ячейки разными способами для разных выводов или целей

3.  Абстракция: скрывать детали реализации от читателей документа

4.  Удобство поддержки: нужно вносить изменения только в одном месте

## Что нового: расширенное форматирование

Quarto изначально включает все необходимое для научных публикаций и [воспроизводимого анализа](https://habr.com/ru/articles/417469/):

-   обширную поддержку перекрестных ссылок и цитат;
-   расширенное аннотирование рисунков, таблиц и кода;
-   нативную поддержку графов и блок-схем (`mermaid` и `Graphviz`)
-   расширенные возможности написания формул LaTeX.

**Пример**: Запись матрицы (пакет `amsmath`)

$$A = \begin{pmatrix}4&-3&-3\\1&2&1\\1&1&2\end{pmatrix}$$ **Пример**: Запятая как десятичный разделитель (пакет `icomma`)

$$x = 1,11,\, y = 2,18,\, \pi = 3,141593\dots$$

::: notes
Запятая в качестве десятичного разделителя -- стандарт математической записи в России (установлен сразу несколькими ГОСТами) и в большинстве стран Европы, Южной Америки и Африки.
:::

## Что нового: интерактивное и динамическое содержимое

Quarto поддерживает интерактивное и динамическое содержимое с использованием JavaScript и других веб-технологий. Это позволяет создавать документы с интерактивными графиками, анимацией и другими динамическими функциями. Для создания интерактивного документа выберите один из следующих форматов:

-   Shiny
-   Observable JS

. . . 

Или использовать элементы `htmlwidgets` (`plotly`, `leaflet`, `dygraph` и другие).

## Что нового: настраиваемые шаблоны и брендирование

Quarto позволяет настраивать шаблоны и темы, которые можно использовать для управления внешним видом ваших документов. Это облегчает создание профессиональных документов с единым визуальным стилем.

![Пример брендинга](branding-example)

::: notes
Данная презентация создана в Quarto на основе шаблона Otus!
:::

# Алгоритм работы

## Общий алгоритм проектов Quarto

```{mermaid quarto-general}
flowchart LR
  A{Выбираем тип проекта} --> B(Редактируем YAML)
  B --> C(Пишем текст и код)
  B --> D(Добавляем изображения)
  C --> E(Настраиваем отображение)
  D --> E
  E <--> B
  E --> F[Публикация]
  
  classDef optional stroke-dasharray:10;
  class D optional
```

## Как работает Quarto

При работе с R система Quarto сначала создает markdown-документ, который затем конвертируется в нужный формат программой `pandoc`.

![](how-it-works)

## Типы проекта (1 из 2)

```{mermaid quarto-types}
flowchart TD
 typeD>Документ]
 typeP>Презентация]
 typeI>Интерактивный HTML]
 
 formatPDF[PDF]
 formatHTML[Статичный HTML]
 formatWord[Word/ODT]
 
 formatPP[PowerPoint]
 formatRJS[Reveal JS]
 formatBeamer[Beamer]
 
 formatShiny[Shiny]
 formatOJS[Observable JS]
 formatHW[htmlwidgets]
 
 typeD --> formatPDF & formatHTML & formatWord
 typeP --> formatPP  & formatRJS &  formatBeamer
 typeI --> formatShiny  & formatOJS & formatHW
```

## Типы проекта (2 из 2)

::: {.callout-note}
Из одного документа можно сверстать несколько документов в разных форматах. При этом отображение можно настроить отдельно для каждого формата.
:::

```yaml
format:
  html:
    theme: pulse
  pdf:
    fig-format: png
```

::: {.callout-note}
Только формат HTML позволяет создавать интерактивные документы.
:::

## YAML-заголовки (1 из 2)

YAML («**Y**AML **A**in't **M**arkup **L**anguage») – язык сериализации данных, как JSON и XML. Используется Quarto для записи конфигурации проекта (как в R и Julia). Формат записи – `опция: значение`.

Код конфигурации YAML отделяется тремя дефисами сверху и снизу:

``` yaml
---
title : "Hello, Quarto"
author: "otus.ru"
date  : 2023-06-13
format:
  pptx:
    reference-doc: ../templates/template.pptx
    mermaid-format: png
---
```

## YAML-заголовки (2 из 2)

Опции Quarto делятся на:

- общие;
- формат-специфичные (записываются под `format: [ваш формат]:`).

Для каждого из форматов существует до нескольких десятков опций. Полный список есть на [сайте Quarto](https://quarto.org/docs/reference/).

## Фрагменты кода

Как и для Rmarkdown, возможность интерпретировать код и встраивать результаты его исполнения в документ является основной функциональной особенностью Quarto.

В Quarto опции для отдельного фрагмента кода, если они нужны, записываются внутри блока в формате YAML и начинаются с `#|`:

```{{r}}
#| label: load-packages
#| include: false

library(tidyverse)
library(tidymodels)
```

## Контейнеры pandoc

При работе в Quarto рекомендуется использовать универсальный формат контейнеров `pandoc`

1. Блочный контейнер – аналог `<div>` ограничивается двоеточиями (не менее 3) с опциональными атрибутами в фигурных скобках:

```markdown
::: {.border}
Этот текст будет окружен прямоугольной рамкой
:::

::: {.callout-note}
А это будет примечание
:::
```

2. Строчный контейнер – аналог `<span>` записывается в квадартных скобках, за которыми следуют атрибуты в фигурных скобках:

```markdown
[Сначала id, потом класс, потом все остальное]{#id .class key1="val1" key2="val2"}
```

## Форматирование изображений (1 из 3)

Синтаксис изображений похож на гиперссылки, но с восклицательным знаком в начале:

```markdown
![Собачка](doge.png){height=2cm}
```

Можно добавлять атрибуты, например, выравнивание:

```markdown
![Собачка](doge.png){fig-align="left" fig-alt="Изображение собаки"}
```

Надпись в квадратных скобках считается подписью к изображению. Ее можно оставить пустой.

## Форматирование изображений (2 из 3)

Можно сгруппировать несколько изображений и расположить их определенным образом:

```markdown
::: {#fig-two-triangles layout-ncol=2}

![Первая картинка](tred.png){#fig-triangle-red}

![Вторая картинка](tblue.png){#fig-triangle-blue}

Две картинки
:::
```

В качестве макета можно указать массив, каждый элемент которого – ряд в сетке. Отрицательные значения добавляют пространство между колонками:

```markdown
::: {#fig-images layout="[[20,20], [40]]"}

![Первая картинка](image01.png){#fig-01}

![Вторая картинка](image02.png){#fig-02}

![Большая картинка](image03.png){#fig-big}

Три картинки: две маленькие и одна большая
:::
```

## Форматирование изображений (3 из 3)

Для изображений, генерируемых кодом, параметры задают внутри блока:

```{{r}}
#| label: fig-two-plots
#| fig-cap: "Две диаграммы"
#| fig-subcap: 
#|   - "Первая диаграмма"
#|   - "Вторая диаграмма"
#| layout: "[20 10]"

hist(mtcars$)
```


# Пример проекта: статья + интерактивное приложение

## Code

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

<!-- Прощальная сова -->

---
 
