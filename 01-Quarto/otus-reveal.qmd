---
title: "Язык R для анализа данных"
subtitle: "Утилита формирования отчётов Quarto"
author  : "otus.ru"
title-slide-attributes:
  data-background-image: images/title.jpg
  data-background-size: contain
# date    : 2023-06-13
format:
    revealjs:
      theme: otus.scss
      logo: images/owls_R.png
      incremental: true
      width: 960
      height: 540
      transition: convex
      mermaid-format: png
      code-summary: "Показать код"
      fig-responsive: false
      embed-resources: true
default-image-extension: "png"
author-name: Андрей Павлюченко
author-role: Старший медиааналитик
author-image: images/apawluczenko
author-job : "Мониторинг и исследования медиа (Brand Analytics, Медиалогия, R, Python)"
author-likes: "Люблю делать: Text Mining, графовый анализ, интерактивные дэшборды"
author-contact: "a.pawluczenko@gmail.com / @a.pawluczenko"
---

{{< include common.qmd >}}

# Знакомство с Quarto {background-image="images/section.jpg" background-size="contain"}

## Что за Quarto? {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.columns}

:::::: {.column}
![](images/quarto-hamlet-1.jpeg){fig-alt="Старая книга «Гамлет» in quarto" fig-title="Старая книга «Гамлет» in quarto" height="13em"}

[Источник: Tom Mock на [GitHub](https://github.com/jthomasmock/quarto-training){target="_blank"}]{style="font-size:0.7em;color:grey;"}
::::::

:::::: {.column}
Quarto (отсылка к формату `in quarto`) -- система публикации документов от Posit (бывшая RStudio, создатели `Tidyverse`).

![](images/quarto){width=250 alt="Логотип Quarto" title="Логотип Quarto"}

![](images/posit2){width=250 alt="Логотип Posit"  title="Логотип Posit"}
::::::
:::

::: {.notes}
Quarto – это то, что получилось, когда в тогда еще RStudio решили принципиально переделать Rmarkdown. Из известных мне людей это Томас Мок, и Мине Четинкая-Рундель. Лекторка, познакомившая меня с R, а спустя 10 лет объяснившая, как работать в Quarto.
:::

## Что за Quarto? {.smaller background-image="images/slide.jpg" background-size="contain"}

Quarto -- не библиотека R, а автономное приложение с интерфейсом командной строки. Например, даже без установленных R или Python вы можете:

1. [Создать документ `document.md` в своем любимом редакторе.]{}
2. [Добавить YAML-метаданные (как Rmarkdown, но см. ниже).]{}
3. [Сверстать документ в нужном вам формате.]{}

. . .

```{.bash filename="Terminal"}
quarto render document.md
```

::: {.notes}
Речь идет именно о статическом markdown-файле. Для того, чтобы исполнять ячейки с кодом, вам понадобятся соответственно R или Python, а для Julia - Julia и Python.

Сейчас мы посмотрим на особенности и возможности Quarto. Коллеги, я вас попрошу, даже настаиваю на этом: то, что мы будем обсуждать – возможности системы, форматы и настройки – примеряйте на себя. Представляйте себе, что бы вы могли написать на Quarto, какой свой проект реализовать, для какой аудитории, и что вам для этого нужно узнать.
:::

## Что за Quarto? {.smaller background-image="images/slide.jpg" background-size="contain"}

RStudio IDE новых версий включает Quarto, а также предоставляет для него редактор кода с автозаполнением и удобный визуальный редактор.

Quarto имеет более широкие по сравнению с Rmarkdown возможности. Можно воспринимать его как:

 

-   [Rmarkdown++;]{}
-   [MS Word с гибридным интерфейсом;]{}
-   [Dreamweaver для аналитиков и ученых.]{}

::: {.notes}
Программа RStudio включает дистрибутив Quarto, если быть точным, переносную версию Quarto. Разработчики Quarto При этом советуют все-таки скачивать Quarto отдельно и устанавливать в систему. Именно это мне пришлось сделать в процессе подготовки из-за проблем с рендерингом plotly. Quarto сейчас релизится намного чаще, чем RStudio, и версия в RStudio содержит обидный баг, который в Quarto уже исправлен.

Rmarkdown++ — по аналогии с C++: нечто новое, претендующее на обобщение своего предшественника, при этом сохраняющее с ним по возможности полную совместимость.

MS Word — это про визуальный редактор в RStudio. Мы глянем на него, но подробно останавливаться не будем. Там многое понятно интуитивно, но кое-что мы все же рассмотрим.

Dreamwever, как вы, возможно, знаете — тоже программа с гибридным интерефейсом для создания сайтов. То есть там тоже можно все прописывать кодом, а можно рисовать и перетаксивать вручную. На Quarto тоже можно создавать сайты. Сайт Quarto, скорее всего, тоже создан на Quarto: это можно предположить по характерной структуре, которую мы обсудим ближе к концу занятия.

**Важно:** по словам разработчиков Posit Quarto призван заменить Rmarkdown. Rmarkdown будет поддерживаться, но не разрабатываться. То есть они будут фиксить ошибки Rmarkdown, но разработка новых «фич» ведется исключительно в рамках Quarto.
:::

## Что нового: не только R {background-image="images/slide.jpg" background-size="contain"}

Quarto умеет обрабатывать код на следующих языках:

:::{.columns}
::::::{.column}

-   [R;]{}
-   [Python;]{}
-   [Julia;]{}
-   [JavaScript (Observable).]{}
::::::

::::::{.column}
![](images/languages){.absolute width="200px"}
::::::
:::

::: {.notes}
Нас интересует в первую очередь R. Julia это круто, но за пределами нашего курса. А JavaScript для меня лично – темный лес. Тем не менее, Observable позволяет создавать страницы, похожие на Shiny, но не требюущие разворачивания на сервере.
:::

## Многоформатность {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {style="font-size:0.8em;"}
Quarto поддерживает множество форматов вывода, включая HTML, PDF, EPUB и другие. В Rmarkdown для большинства этих форматов необходимы дополнительные библиотеки:

| **Возможности Quarto**    | **Реализация в Rmarkdown** |
|---------------------------|----------------------------|
| HTML                      | ✓                          |
| PDF                       | ✓                          |
| DOCX/ODT                  | ✓                          |
| PowerPoint                | ✓                          |
| сайт/блог                 | `distill`, `blogdown`      |
| HTML-презентация          | `revealjs`                 |
| книга                     | `bookdown`                 |
| интерактивная презентация | `flexdashboard`            |
:::

::: {.notes}
[**Показать галерею Quarto:** https://quarto.org/docs/gallery/]{style="color:#d00;"}

Отмечу, что PowerPoint что в Rmarkdown, что в Quarto, оставляет желать лучшего. В базовом исполнении получаются либо очень простые по структуре документы, либо требующие ручной правки в PowerPoint. Прогрессивные деятели в Posit и их партнеры не считают формат PowerPoint приоритетным для разработки.

По своему опыту скажу, что PowerPoint легче создавать руками. Но если есть необходимость создавать автоматизированные отчеты именно в этом офрмате, придется заморочиться. Rmarkdown (а в Quarto, судя по всему, остался ровно тот же движок для рендеринга pptx), распознает семь макетов слайдов, включая пустой (blank). Например, у нас даже типовые макеты включают более сложные варианты верстки.

[А теперь давайте откроем Quarto в RStudio и создадим самый базовый файл. <…> А теперь посмотрим визуальный редактор. Тот самый MS Word для R.]]{style="color:#d00;"} <…> Лично мне удобнее работать с кодом, чем в визуальном редакторе. Но одна штука в нем точно полезна и на первых порах иногда даже незаменима. Вот как можно легко добавить ссылку на литературу в Quarto. При этом Quarto создает нам список литературы в формате БибТеХ или CSL. В дальнейшем мы можем добавлять литературу в него таким же образом или редактировать вручную, например, скопировав запись на сайте публикации. Если вы не знакомы с такими форматами списков литературы, это хороший способ его изучить. Добавьте несколько ссылок через редактор, затем научитьесь создавать и редактировать такие файлы самостоятельно. Надеюсь, вам это еще пригодится!
:::

## Модульный дизайн {.smaller background-image="images/slide.jpg" background-size="contain"}

Quarto позволяет разбивать анализ на маленькие, повторно используемые компоненты, которые можно собирать в сложные документы. Это делает повторное использование и комбинирование частей вашего анализа легким.

Сложный проект на R может состоять из нескольких скриптов, содержащих загрузку и предобработку данных, специальные функции, моделирование и визуализацию.

```{{r}}
source('data-wrangle.R', encoding = 'UTF-8')
```

## Модульный дизайн {.smaller background-image="images/slide.jpg" background-size="contain"}

Как «настоящие» языки программирования, Quarto позволяет точно так же использовать сторонние файлы `.qmd`: собирать их в большие проекты, использовать вывод одной ячейки кода много раз.

Пример: включить все объекты из файла `_data.qmd`

```{.markdown shortcodes=false}
{{{< include _data.qmd >}}}
```

::: {.notes}
Это в Quarto называется shortcodes. Кстати, синтаксис Quarto работает на разных уровнях, в том числе внутри блоков кода. Для того, чтобы избегнуть исполнение этого кода, нужно заключить его в дополнительную пару фигурных скобок. Другой вариант – добавить команду {shortcodes=false} в опциях ячейки кода (в фигурных скобках).

Именно так сделана и эта презентация. Например, у нее есть рабочая версия, версия для мультиплекса и версия для сохранения в PDF. Весь контент находится только в одном файле, остальные его только заимствуют.
:::

## Модульный дизайн {.smaller background-image="images/slide.jpg" background-size="contain"}

Quarto позволяет использовать параметры, c которыми можно готовить разные отчеты из одного и того же документа, например:

-   [отчеты для разных регионов;]{}
-   [отчеты для разных периодов;]{}
-   [моделирование с разными допущениями или алгоритмами.]{}

. . .

``` yaml
---
title : "Анализ рынка труда"
…
params:
  job : "Бухгалтер"
  area: "Москва"
---
```

::: {.notes}
Параметры располагаются на верхнем уровне YAML-преамбулы (это явление вам уже знакомо по Rmarkdown, но мы еще разберем его ниже, потому что роль YAML в Quarto только усилилась) и называются именно `params`. А названия самих параметров должны соответствовать названиям переменных в R, Потому что в основном через R мы к ним и обращаемся (то же справедливо, если мы работаем в Python или Julia). То есть, дефисы в названии недопустимы, в отличие от обычных YAML-опций. А вот кавычить строки не обязательно: в большинстве случаев Quarto разбирается, что строка.
:::

## Модульный дизайн {.smaller background-image="images/slide.jpg" background-size="contain"}

Значения параметров используются в качестве шаблона в коде документа, например:

```{r}
#| label: ex-params
#| echo: true
#| eval: false
#| code-line-numbers: "3,4"
df_meta <- open_dataset('data/db/meta', partitioning = 'job_id') |>
  filter(
    job  == params$job,
    area == params$area
  )
```

Затем документ можно сверстать с разными параметрами из R или командной строки:

```{.bash filename="Terminal"}
quarto render doc.qmd -P job:"Бухгалтер" -P area:"Москва" --output doc.pdf
```

## Модульный дизайн {.smaller background-image="images/slide.jpg" background-size="contain"}

Некоторые преимущества модульных документов включают:

1. [Повторное использование: можно повторно использовать те же ячейки в нескольких документах.]{}
2. [Гибкость: можно повторно комбинировать ячейки разными способами для разных выводов или целей.]{}
3. [Абстракция: скрывать детали реализации от читателей документа.]{}
4. [Удобство поддержки: нужно вносить изменения только в одном месте.]{}

::: {.notes}
Я думаю, коллеги, вы и так это понимаете.

::::::{style="color:#d00;"}
**А теперь давайте попробуем сверстать такой файл.** У нас есть база данных вакансий по ряду профессий, полученная из API сервиса HeadHunter. Кажется, там 7 наименований. Допустим, мы хотим создать некий отчет по каждой из профессий (не по всем сразу). И теперь нам не нужно делать семь практически одинаковых файлов. Мы сделаем один, а затем сверстаем семь документов.

Более того: давайте сверстаем каждый из них в двух форматах: HTML-отчет и PDF.
::::::
:::

## Расширенное форматирование {.smaller background-image="images/slide.jpg" background-size="contain"}

Quarto изначально включает все необходимое для научных публикаций и [воспроизводимого анализа](https://habr.com/ru/articles/417469/):

-   [обширную поддержку перекрестных ссылок и цитат;]{}
-   [расширенное аннотирование рисунков, таблиц и кода;]{}
-   [нативную поддержку графов и блок-схем (`mermaid` и `Graphviz`);]{}
-   [расширенные возможности написания формул $\LaTeX$.]{}

. . .

::: {.columns}
:::: {.column width="40%"}
**Пример**: Запись матрицы (пакет `amsmath`)

```
\begin{equation}
A = \begin{pmatrix}
    4 & -3 & -3 \\
    1 &  2 &  1 \\
    1 &  1 &  2
  \end{pmatrix}
\end{equation}
```

::::

:::: {.column .output width="40%"}
::::: {.r-stack}
:::::: {.fragment .fade-out}
Здесь будет матрица, нарисованная в $\LaTeX$
::::::

:::::: {.fragment .fade-in}
\begin{equation}
A = \begin{pmatrix}
    4 & -3 & -3 \\
    1 &  2 &  1 \\
    1 &  1 &  2
  \end{pmatrix}
\end{equation}
::::::
:::::
::::

:::

## Что со всем этим делать? {.smaller background-image="images/slide.jpg" background-size="contain"}

Quarto «из коробки» позволяет создавать более 40 форматов документов (`format: ваш-формат`).

Для каждого формата доступны по нескольку десятков опций.

Знание CSS/SASS, $\LaTeX$ или Pandoc дает почти безграничные возможности настройки внешнего вида отчетов.

Quarto динамично развивается, появляются новые возможности.

. . .

<br>

Так что, «читайте руководство»?

. . .

<br>

Безусловно. Но сейчас вы получите карту для ориентации во вселенной Quarto.

::: {.notes}
Повторюсь: достаточно будет, если вы будете в курсе того, что *в принципе* можно сделать в Quarto. И будете знать как *в принципе* это сделать. Например, не обязательно, чтобы у вас от зубов отскакивало, как создать интерактивную диаграмму с элементами управления на боковой плашке. Или как запустить трансляцию презентации через мультиплекс. Но желательно, чтобы вы помнили, что можно сделать и так. И тогда крутизна отчетов, которые вы сможете создавать в Quarto, будет ограничена только вашей усидчивостью.
:::

# Алгоритм работы {background-image="images/section.jpg" background-size="contain"}

## Общий алгоритм проектов Quarto {.scrollable background-image="images/slide.jpg" background-size="contain"}

```{mermaid}
%%| label: quarto-general
flowchart LR
  A{Выбираем тип проекта} --> B(Редактируем YAML)
  B --> C(Пишем текст и код)
  B --> D(Добавляем изображения)
  C --> E(Настраиваем отображение)
  D --> E
  E <-.-> B
  E --> F[Публикация]
  
  classDef optional stroke-dasharray:10;
  class D optional
  class E optional
```

::: {.notes}
Смотрим на нативную поддержку диаграмм (графов, флоучартов и т. д.). В Quarto, как я уже говорил можно взять и написать диаграмму на mermaid или Graphviz. Здесь пример флоучарта, написанного на mermaid. Очень базовый пример, с базовым оформлением. Добавлено только одно определение класса, чтобы не было совсем скучно и вы увидели, что так можно делать.
:::

## Общий алгоритм проектов Quarto {.smaller background-image="images/slide.jpg" background-size="contain"}

Кстати, код диаграммы:

```{mermaid quarto-general-code}
%%| echo: fenced
%%| eval: false
flowchart LR
  A{Выбираем тип проекта} --> B(Редактируем YAML)
  B --> C(Пишем текст и код)
  B --> D(Добавляем изображения)
  C --> E(Настраиваем отображение)
  D --> E
  E <--> B
  E --> F[Публикация]
  
  classDef optional stroke-dasharray:10;
  class D optional
  class E optional
```

::: {.notes}
Кстати, в блоках кода `mermaid` опции начинаются с двух знаков процента, как в самом `mermaid`
:::

## Как работает Quarto {.smaller background-image="images/slide.jpg" background-size="contain"}

При работе с R система Quarto сначала создает markdown-документ, который затем конвертируется в нужный формат программой `pandoc`.

![](images/qmd-both)

[Источник: Tom Mock на [GitHub](https://github.com/jthomasmock/quarto-training){target="_blank"}]{style="font-size:0.7em;color:grey;"}

::: {.notes}
Немного остановимся на том, что происходит «под капотом», когда мы верстаем документы в Quarto. Это пригодится вам, когда вы будете создавать свои сложные, кастомизированные, документы: если что-то пойдет не так, как вам нужно, вы сможете разобраться, на каком этапе происходит ошибка.

Напомню, что `pandoc` — программа, конвертирующая документы между разными форматами, на что и намекает ее название.

Что здесь нового по сравнению с Rmarkdown?

1. Во-первых, возможность верстать документы, сгенерированные в Jupyter Notebook. Python сейчас можно запускать и в RStudio, но кому-то Jupyter просто привычнее. Кроме того, Julia на данный момент намного проще запускать именно в Jupyter.

Конечно, для генерации документов с кодом нам потребуется соответственно R для «Нитр» и Python для Jupyter, и Julia для самой себя. Но если у вас уже есть документ в формате markdown (напомню, это статичный документ: на втором шаге Нитр или Юпитер жестко кодируют в markdown вывод, сгенерированный кодом: строят markdown-таблицу, если это таблица или датафрейм, а если это диаграмма — сохраняют ее как изображение в отдельный файл и вставляют ссылку) — так вот, если у вас уже есть статичный документ, то для его верстки в любой формат вам понадобится только Quarto.

2. Потому что, во-вторых, Rmarkdown использует на четвертом шаге при работе с `pandoc` команды R для управления процессом, в частности, условные операторы. Quarto использует команды, написанные на языке Lua, как указано на диаграмме. Фильтры на Lua поставляются нам вместе с Quarto. Благодаря этому начиная с этапа с markdown-документом мы не зависим от R.
:::

## Типы проекта {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {layout-ncol=3 style="font-size:0.8em;"}
```{mermaid quarto-docs-static}
flowchart LR
 typeD>Документ]
 
 formatPDF[PDF]
 formatHTML[Статичный HTML]
 formatWord[Word/ODT]
 
 typeD --> formatPDF & formatHTML & formatWord
```

```{mermaid quarto-docs-pres}
flowchart LR
 typeP>Презентация]
 
 formatPP[PowerPoint]
 formatRJS[Reveal JS]
 formatBeamer[Beamer]

 typeP --> formatPP  & formatRJS &  formatBeamer
```

```{mermaid quarto-docs-js}
flowchart LR
 typeI>Интерактивный HTML]
 
 formatShiny[Shiny]
 formatOJS[Observable JS]
 formatHW[htmlwidgets]
 
 typeI --> formatShiny  & formatOJS & formatHW
```
:::

Проекты других доступных типов можно создать вручную, прописав `format: [наш-формат]`

::: {.notes}
Это типы проектов, которые можно создать из меню RStudio. Если мы нажмем «создать», то у нас в заголовке уже будут прописаны соответствующие опции.

[**Давайте создадим проект в каком-нибудь интересном формате**]{style="color:#d00;"}
:::

## Типы проекта {.smaller background-image="images/slide.jpg" background-size="contain"}

Из одного документа можно сверстать несколько документов в разных форматах. При этом отображение можно настроить отдельно для каждого формата.

```yaml
format:
  html:
    theme: pulse
  pdf:
    fig-format: png
```

::: {.callout-note title="Обратите внимание"}
Только формат HTML позволяет создавать интерактивные документы.

При этом компоненты Shiny требуют хостинга на удаленном сервере. Компоненты, основанные на JavaScript, будут интерактивными у читателей без дополнительных сложностей.
:::

## Типы проекта {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {.callout-note title="Обратите внимание"}
Для верстки PDF нужно установить $\TeX$-дистрибутив. Лучше всего `tinytex`:

``` {.bash filename="Terminal"}
quarto install tinytex --update-path
```
:::

```yaml
format:
  html:
    theme: united
  pdf:
    papersize: A5
    fig-format: png
    include-in-header: 
      - file: packages.tex
```

# Кастомизация проекта: элементы Quarto {background-image="images/section.jpg" background-size="contain"}

## Структура документа {.smaller background-image="images/slide.jpg" background-size="contain"}

![](images/quarto-structure)

## YAML-заголовки {.smaller background-image="images/slide.jpg" background-size="contain"}

YAML («**Y**AML **A**in't **M**arkup **L**anguage») – язык сериализации данных, как JSON и XML. Используется Quarto для записи конфигурации проекта. Формат записи – `опция: значение`.

Код конфигурации YAML отделяется тремя дефисами сверху и снизу:

``` yaml
---
title : "Hello, Quarto"
author: "otus.ru"
format:
  pptx:
    reference-doc: ../templates/template.pptx
    mermaid-format: png
---
```

::: {.notes}
Опции Quarto делятся на:

- общие;
- формат-специфичные (записываются под `format: [ваш формат]:`.

Для каждого из форматов существует до нескольких десятков опций. Полный список есть на [сайте Quarto](https://quarto.org/docs/reference/).
:::

## YAML-заголовки {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {style="font-size:0.75em;"}
В качестве значения может быть указан список:

```yaml
опция:
  - элемент1
    опция-элемента1: значение
  - элемент2
```

Если в качестве значения передается многостроковый текст, он печатается с новой строки после знака `|` [(источник: Mickaël Canouil на [GitHub](https://github.com/mcanouil/mickael.canouil.fr){target="_blank"})]{style="font-size:0.66em;color:grey;"}:

```yaml
---
format:
  html:
    html-math-method: mathjax
    include-in-header:
     - text: |
          <script>
          window.MathJax = {
            loader: {
              load: ['[tex]/upgreek', '[tex]/boldsymbol', '[tex]/physics']
            },
            tex: {
              packages: {
                '[+]': ['upgreek', 'boldsymbol', 'physics']
              }
            }
          };
          </script>
---
```
:::

::: {.notes}
В качестве примера многострочного текста в опциях я решил привести реальный заголовок из чужого проекта. Да, в большинстве случаев такие опции используются для передачи TeX-скриптов, пример чего мы еще увидим ниже. В данном примере используется javascript, но если присмотреться, речь все равно идет о TeX. Капризный TeX, который часто нужно настраивать.
:::

## YAML-заголовки {.smaller background-image="images/slide.jpg" background-size="contain"}

К метаданным можно обращаться через синтаксис Quarto `{{<…>}}`:

```{shortcodes=false}
[{{< meta author >}}]{style="font-family:Courier;font-size:3em;float:right;"}

![Otus: R для анализа данных]({{< meta format.revealjs.logo >}}){#fig-otus-r-owl}
```

. . .

[{{< meta author >}}]{style="font-family:Courier;font-size:3em;float:right;"}

. . .

![Otus: R для анализа данных]({{< meta format.revealjs.logo >}}){#fig-otus-r-owl width=125}

::: {.notes}
Этот синтаксис, как и команда включения стороннего файла, называется шорткод (`shortcodes`). Обращение к метаданным в шорткодах обозначается ключевым словом `meta`. Вложенные параметры (в подразделах) можно получить, используя в качестве разделителя точку. Как в Питоне например. В нашем примере это `format` затем `revealjs`, затем `logo`.
:::

## Пример настройки: HTML {.smaller background-image="images/slide.jpg" background-size="contain"}

Опции HTML позволяют настраивать макет страницы, базовые элементы стиля и многое другое.

```yaml
---
format:
  html:
    theme:
      light: pulse
      dark: cyborg
    css: styles.css
    mainfont: corbel
    fontsize: 1.1rem
    fontcolor: "#090103"
    linkcolor: "#E81444"
    monofont: consolas
    title-block-style: plain
    title-block-banner: "#DDBEED"
    title-block-banner-color: "#AA26EE"
    margin-top: 40px
---
```

Готовые темы Quarto представлены на сайте [Bootswatch](https://bootswatch.com/){target="_blank"}.

::: {.notes}
Внешний вид большинства элементов, шрифты и цвета можно настроить в YAML-заголовках. Все остальное можно прописать во внешнем css-файле.
:::

## Пример настройки: PDF {.smaller background-image="images/slide.jpg" background-size="contain"}

В PDF тоже можно настраивать макет (и размер) страницы, базовые элементы стиля, а также добавлять файлы $\TeX$ для более тонкой настройки.

```yaml
---
format:
  pdf:
    mainfont: Georgia
    monofont: Consolas
    linkcolor: Bittersweet
    citecolor: Mahogany
    urlcolor: MediumOrchid
    papersize: A5
    fig-format: png
    include-in-header:
      - text: |
          \usepackage[english,russian]{babel}
          \usepackage{fontspec}
          \setsansfont{Courier New}
          \usepackage{amsmath,amsfonts,amssymb,amsthm,mathtools}
          \usepackage{icomma}
---
```

::: {.notes}
Вместо `text` можно передать на включение файл `.tex` с загрузкой библиотек, шрифтами и определениями собственных функций. В силу того, что TeX далеко не всегда дружит с кириллическими текстами, я советую иметь под рукой TeX-код Данила Федоровых: https://ru.overleaf.com/latex/templates/5-dot-2-2-russkii-iazyk-v-latex-xelatex/skfzmvgdgvnk.

[Давайте попробуем что-нибудь написать по-русски в нашей статье со ссылкой на статью Леонтьева. <…> Добавим команды из файла Федоровых]{style="color:#d00;"}]
:::

{{< include otus-question.qmd >}}

## Фрагменты кода {.smaller background-image="images/slide.jpg" background-size="contain"}

Как и для Rmarkdown, возможность интерпретировать код и встраивать результаты его исполнения в документ является основной функциональной особенностью Quarto.

В Quarto опции для отдельного фрагмента кода, если они нужны, записываются внутри блока в формате YAML и начинаются с `#|`:

```{{r}}
#| label: load-packages
#| include: false

library(tidymodels)
```

. . .

Можно спрятать код под спойлер:

```{r}
#| label: ex-fold
#| echo: fenced
#| code-fold: show
#| code-summary: 'Показать код'
x <- rchisq(1e3, 13)
```

## Фрагменты кода {.smaller background-image="images/slide.jpg" background-size="contain"}

В Quarto очень легко подсвечивать строки кода:

. . .

```{r}
#| echo: fenced
#| code-line-numbers: "2|3-4|6|7"
#| label: ex-highlight
#| eval: false

hist(x)
ggplot2::qplot(x, geom = 'histogram')
```

. . .

Также можно [выбрать или настроить](https://quarto.org/docs/output-formats/html-code) оформление кода

::: {layout-ncol=2 layout-valign="bottom"}

```yaml
---
format:
  html: 
    code-block-bg:          "#fef"
    code-block-border-left: "#faf"
    highlight-style:        breeze
execute: 
  echo: fenced
---
```
:::: {.r-stack}
::::: {.fragment .fade-out}

Как будет выглядеть код?

:::::

::::: {.fragment .fade-in}

![](images/purple-code-breeze)

:::::
::::
:::

## Контейнеры pandoc {.smaller background-image="images/slide.jpg" background-size="contain"}

При работе в Quarto рекомендуется использовать универсальный формат контейнеров `pandoc`

1. [Блочный контейнер – аналог `<div>` ограничивается двоеточиями (не менее 3) с опциональными атрибутами в фигурных скобках:]{}

. . .

``` markdown
::: {style="border: 1px solid;font-size:0.2em;"}
Этот маленький текст будет окружен прямоугольной рамкой
:::

::: {.callout-note title="Обратите внимание"}
А это будет примечание
:::
```

. . .

::: {style="border: 1px solid;font-size:0.2em;"}
Этот маленький текст будет окружен прямоугольной рамкой
:::

::: {.callout-note title="Обратите внимание"}
А это будет примечание
:::

::: {.notes}
В Quarto есть ряд готовых классов контейнеров. В том числе так называемые выноски (callout). Одну из них вы видите перед собой. Кроме Note есть Danger, Success, Warning. Знакомые названия для пользователей Shiny.
:::

## Контейнеры pandoc {.smaller background-image="images/slide.jpg" background-size="contain"}

При работе в Quarto рекомендуется использовать универсальный формат контейнеров `pandoc`

2. [Строчный контейнер – аналог `<span>` записывается в квадартных скобках, за которыми следуют атрибуты в фигурных скобках:]{}

. . .

``` markdown
[Сначала id, потом класс, потом все остальное]{#id .class key1="val1" key2="val2"}

[Красный текст]{style="color:#d00;"}
```

[Красный текст]{style="color:#d00;"}

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

Синтаксис изображений похож на гиперссылки, но с восклицательным знаком в начале:

``` markdown
![Собачка](doge.png "Изображение собаки"){height=2cm}
```
![Собачка](images/doge.png "Изображение собаки"){height=2cm}

Надпись в квадратных скобках считается подписью к изображению. Ее можно оставить пустой.

Текст в кавычках после url изображения – его всплывающее название (`<img … title=…>`)

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

Можно добавлять атрибуты, например, выравнивание:

``` markdown
![Собачка](doge.png "Изображение собаки побольше"){fig-align="left" fig-alt="Изображение собаки"}
```

![Собачка](images/doge.png "Изображение собаки побольше"){width=200 fig-align="left" fig-alt="Изображение собаки"}

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

Можно сгруппировать несколько изображений и расположить их определенным образом:

``` markdown
::: {#fig-two-triangles layout-ncol=2}

![Первая картинка](tred.png){#fig-triangle-red width=20}

![Вторая картинка](tblue.png){#fig-triangle-blue width=20}

Две картинки
:::
```
{{< include crossref-ru.qmd >}}

::: {#fig-two-triangles layout-ncol=2}

![Первая картинка](images/tred.png){#fig-triangle-red width=111}

![Вторая картинка](images/tblue.png){#fig-triangle-blue width=111}

Две картинки
:::

## Форматирование изображений {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

В качестве макета можно указать массив, каждый элемент которого – ряд в сетке:

``` markdown
::: {#fig-images layout="[[20,20], [40]]" style="font-size:0.5em;"}
![Первая картинка](quarto.png){#fig-01 width=40}

![Вторая картинка](quarto.png){#fig-02 width=40}

![Картинка во втором ряду](quarto.png){#fig-long width=80}

Три картинки
:::
```

::: {#fig-images layout="[[20,20], [40]]" style="font-size:0.5em;"}
![Первая картинка](images/quarto){#fig-01 width=20}

![Вторая картинка](images/quarto){#fig-02 width=20}

![Картинка во втором ряду](images/quarto){#fig-long width=40}

Три картинки
:::

::: {.notes}
Отрицательные значения в массиве добавляют пространство между соседними изображениями в ряду.

Так можно распределять по сетке (grid) не только изображения, но и текст, диаграммы и все остальное. Просто каждый следующий элемент (например, строку markdown, то есть отделенную пустым абзацем, заголвок markdown, фрагмент кода или таблицу) помещается в следующую ячейку сетки: сначала в том же ряду, затем в следующем и так далее.

Сетка, grid, вам уже знакома по Shiny. Мы к ней еще ненадолго вернемся. По умолчанию весь документ разверстан строками и колонками. Просто таким синтаксисом, как в этом примере, мы явно управляем размещением элементов, а в остальное время Quarto решает за нас. Как правило, просто помещая следующий элемент на следующую строку.
:::

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

Если назвать контейнер с изображениями `#fig-…`, Quarto представит его как одно изображение из нескольких частей (как на предыдущем слайде) и пронумерует соответсвенно.

На изображения можно ссылаться: @fig-two-triangles

Кстати, по умолчанию названия сопровождаются префиксом «Figure». Это можно изменить в настройках проекта:

```yaml
crossref:
  fig-title: Рис.         # Подпись к изображению (по умолчанию "Figure")
  tbl-title: Таблица      # Подпись к таблице (по умолчанию "Table")
  subref-labels: arabic   # (по умолчанию "a, b, …, z")
  fig-prefix: Рис.        # Префикс ссылки на изображение
  tbl-prefix: Таблице     # Префикс ссылки на таблицу
```
::: {.notes}
Например, если мы пишем по-русски, можно перевести префиксы на русский. К сожалению, нумерации из кириллических букв нет.
:::

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

Для изображений, генерируемых кодом, параметры задают внутри блока:

::: {style="font-size:0.75em;"}
```{r}
#| echo: fenced
#| fig-cap: "Две диаграммы"
#| fig-subcap: 
#|   - "Первая диаграмма"
#|   - "Вторая диаграмма"
#| layout: "[20, 10]"
#| fig-width: 30

hist(mtcars$mpg)
hist(mtcars$disp)
```
:::

::: {.notes}
Здесь мы указали, что первая гистограмма размещается в колонке, которая в два раза шире, чем у второй. Это, разумеется, не имеет смысла, если одно изображение на самом деле не шире другого.

Обратите внимание: здесь изображения не пронумерованы: для того, чтобы они были пронумерованы, необходимо дать блоку кода название, начинающееся с `fig-`
:::

## Форматирование изображений {.smaller background-image="images/slide.jpg" background-size="contain"}

Блок кода, чье название начинается с `fig-`, генерирует пронумерованные изображения, на которые можно ссылаться:

::: {style="font-size:0.75em;"}
```{r}
#| echo: fenced
#| label: fig-two-plots
#| fig-cap: "Две диаграммы"
#| fig-subcap: 
#|   - "Первая диаграмма"
#|   - "Вторая диаграмма"
#| fig-width: 50
#| layout: "[10, 10]"
hist(mtcars$mpg)
hist(mtcars$disp)
```
:::

::: {.notes}
На этот раз изображения пронумерованы.
:::

## Диаграммы {.smaller background-image="images/slide.jpg" background-size="contain"}

Диаграмма (граф) в Graphviz. Опции начинаются с `\\|`:

```{dot}
//| label: ex-graphviz-code
//| echo: fenced
//| eval: false
// Комментарий
graph G {
  fontname="Roboto"
  node [fontname="Roboto", color=royalblue]
  layout = neato
  Гусь -- Собака [weight=8];
  Собака -- Свинья;
  Свинья -- Козел [weight=4];
  Козел -- Собака;
  Гусь -- Козел;
  
  fontsize=20;
  label = "Граф товарищей";
}
```

::: {.notes}
С диаграммами `mermaid` мы уже знакомы. Добавлю только, что по умолчанию в формате HTML русалочья диаграмма загружается в своем родном формате — как элементы на странице. В них можно выделять и копировать текст, они адаптируются под изменения размера окна и так далее. В других форматах диаграмма добавляется в виде изображения `.png`. Формат mermaid можно настроить, указав, например, `svg` или `png` для HTML, если вам будет мешать чрезмерная гибкость нативного формата.

Graphviz тоже стоит изучить, если вы хотите использовать графы и блок-схемы. D Quarto блок Graphviz обозначается кодом `{dot}`. Graphviz изначально написан на C, поэтому комментарии там отделяются двумя слешами, а опции кода — двумя слэшами с вертикальной чертой. Это второе исключение в Quarto (первое – mermaid).
:::

## Диаграммы {.smaller background-image="images/slide.jpg" background-size="contain"}

Пример графа в Graphviz:

. . .

```{dot}
//| label: ex-graphviz-graph
//| echo: false
//| eval: true
graph G {
  fontname="Roboto"
  node [fontname="Roboto", color=royalblue]
  layout = neato
  Гусь -- Собака [weight=8];
  Собака -- Свинья;
  Свинья -- Козел [weight=4];
  Козел -- Собака;
  Гусь -- Козел;
  
  fontsize=20;
  label = "Граф товарищей";
}
```

::: {.notes}
Вот такой глупый граф. Но, согласитесь, вручную обычно прописывают не очень большие графы.
:::

## Интерактивные элементы {.smaller background-image="images/slide.jpg" background-size="contain"}

Формат HTML и производные от него (как revealjs) позволяют добавлять в документ интерактивные элементы семейства `htmlwidgets`

**Интерактивная диаграмма plotly:**

::: {style="font-size:0.8em;"}
```{r}
#| echo: true
#| eval: false
#| label: ex-plotly-code

library(plotly)
library(dplyr)
library(forcats)

# Небольшая предобработка: сделаем категориальную переменную явно категориальной
mtcars <- mtcars |>
  mutate(am = fct_recode(as.character(am), 'Automatic' = '0', 'Manual' = '1'))

plot_ly(
  mtcars,
  x = ~wt,
  y = ~hp,
  z = ~qsec,
  color = ~am,
  colors = c('#BF382A', '#0C4B8E'),
  width = 550, height = 450
) |>
  add_markers()
```
:::

::: {.notes}
Капризному (на самом деле пытающемуся быть суперадаптивным) формату `plotly` лучше явно прописывать размеры.
:::

## Интерактивные элементы {.smaller background-image="images/slide.jpg" background-size="contain"}

```{r}
#| echo: false
#| eval: true
#| label: ex-plotly-plot
#| fig-align: center
#| fig-alt: |
#|   "Трехмерная диаграмма рассеивания в пространстве характеристик автомобилей из набора mtcars: ось x – вес; ось y – мощность (л.с.), ось z – скорость"

library(plotly)
library(dplyr)
library(forcats)

# Небольшая предобработка: сделаем категориальную переменную явно категориальной
mtcars <- mtcars |>
  mutate(am = fct_recode(as.character(am), 'Automatic' = '0', 'Manual' = '1'))

plot_ly(
  mtcars,
  x = ~wt,
  y = ~hp,
  z = ~qsec,
  color = ~am,
  colors = c('#BF382A', '#0C4B8E'),
  width = 660, height = 440
) |>
  add_markers()
```

## Интерактивные элементы {.smaller background-image="images/slide.jpg" background-size="contain"}

Формат HTML и производные от него (как revealjs) позволяют добавлять в документ интерактивные элементы семейства `htmlwidgets`

**Интерактивная карта leaflet:**

```{r}
#| echo: true
#| eval: false
#| label: ex-leaflet-code
library(leaflet)

leaflet() |>
  addTiles() |>  # По умолчанию загружает карту OpenStreetMap, и норм 
  addMarkers(lng=37.560826, lat=55.722685, popup="Я разговариваю с вами отсюда")
```

::: {.notes}
Напомню, по умолчанию функция `addTiles` загружает карту OpenStreetMap, довольно неплохую, но не содержащую много информации, а местами устаревшую (Малое кольцо МЖД вместо МЦК). Можно добавить, например, карту Google. Для Яндекс.Карт существует аддон для Leaflet на JavaScript
:::

## Интерактивные элементы {.smaller background-image="images/slide.jpg" background-size="contain"}

```{r}
#| echo: false
#| eval: true
#| label: ex-leaflet-plot
library(leaflet)

leaflet() |>
  addTiles() |>  # По умолчанию загружает карту OpenStreetMap, и норм 
  addMarkers(lng=37.560826, lat=55.722685, popup="Я разговариваю с вами отсюда")
```

## Макеты страниц {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

::: {style="font-size:0.9em;"}
Макет страницы – это то, как *по умолчанию* располагаются элементы на странице и друг относително друга. 

По умолчанию Quarto использует `Article layout`: макет, оптимизированный для записей блога и других веб-публикаций, а также для статей в формате PDF.

```yaml
---
format: 
  html:
    page-layout: article
---
```

Другие доступные макеты:

- [`full`: как `article`, но заполняет контентом поля, если они не используются;]{}
- [`custom`: не содержит grid-макета, заполняет всю доступную ширину.]{}
:::

::: {.notes}
В макете типа «статья» контент по возможности центрирован и занимает по ширине не более 700 пикселей.

Grid, решетка – это, как вы, наверное, видели в Shiny, упорядочивание содержимого страницы по строкам и столбцам. В раскладке `full` этого нет, элементы просто следуют один за другим, поэтому вам придется позаботиться о структуре самим (например, используя CSS Grid) и как минимум задать поля (`margin-top` и прочие).
:::

## Макеты страниц {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

::: {style="font-size:0.8em;"}
Можно делать [исключения](https://quarto.org/docs/authoring/article-layout.html) по местоположению для отдельных блоков, например:

```{.markdown}
::: {.column-screen}
![Изображение на весь экран](image.png)
:::
```

<br>

```{{r}}
#| column: screen-inset

# Иллюстрация на всю ширину экрана с маленькими полями
leaflet() |>
  addTiles() |>
  addMarkers(lng=174.768, lat=-36.852, popup="Родина R")
```

<br>

```{.markdown}
::: {.column-margin}
![Картинка на полях](image.png)
:::
```

<br>

```{.markdown}
[Заметка на полях]{.aside}
```
:::

::: {.notes}
На всю или почти всю ширину часто размещают карты. На полях можно размещать формулы, примечания и т. п. Есть еще несколько видов ширины блока, тем или иным образом выходящего за рамки тела статьи: `body-outset`, `page` и др.

На полях можно автоматически размещать ссылки и примечания:

```yaml
---
reference-location: margin
citation-location: margin
---
```
:::

## Макеты для интерактивного взаимодействия {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

Если вы используете интерактивные элементы с возможностью управления их отображения пользователем (как в Shiny), можно использовать раскладку, облегчающую интерактивное взаимодействие:

- [`.panel-input`: контейнер для элементов управления, располагающийся над контентом;]{}
- [`.panel-tabset`: помещает контент в несколько вкладок, между которыми можно переключаться;]{}
- [`.panel-sidebar` и `.panel-fill` или `.panel-center`: боковая панель для элементов управления и широкая панель для отображаемого контента.]{}

## Макеты для интерактивного взаимодействия {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

::: {style="font-size:0.8em;"}

Как и ширину блока контента, панель можно задать:

- [в теле документа через контейнер:]{}

:::::: {.fragment}

``` markdown
::: {.panel-sidebar}
[элементы]
:::
```

::::::

- [во фрагментах кода, чтобы указать, куда отправятся сгенерированные кодом элементы:]{}

:::::: {.fragment}

```yaml
---
…
format: 
  html:
    page-layout: custom
server: shiny
---
```

```{{r}}
#| panel: sidebar
vars <- setdiff(names(iris), "Species")
selectInput('xcol', 'X Variable', vars)
selectInput('ycol', 'Y Variable', vars, selected = vars[[2]])
numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)
```

```{{r}}
#| panel: fill
plotOutput('plot1')
```
::::::

:::

## Условный контент {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

::: {style="font-size:0.8em;"}
Иногда вам понадобится настроить видимость того или иного фрагмента документа в зависимости от формата, в котором он будет сверстан. Например, загружать интерактивные элементы для HTML, но прятать их или заменять статичным контентом для PDF.

Для этого в Quarto предусмотрено две пары команд (точнее, два класса и два атрибута для контейнеров с контентом), которые можно комбинировать:

1. [`.content-visible` или `.content-hidden`: показать или скрыть контент в зависимости от условия в п.]{} 2[.]{}
2. [`when-format=` или `unless-format=`: показать или скрыть контент (в зависимости от класса в п.]{} 1[) при условии, что формат соответствует или не соответствует значению после знака равно.]{}

:::: {.fragment}

```markdown
::: {.content-visible when-format="html"}

Содержание этого блока будет видно только в формате HTML

:::
```
::::
:::

::: {.notes}
Если документ предполагает несколько форматов. Мы с вами уже видели, что это обычная практика.

Соответственно, можно написать, например, `.content-visible unless-format="pdf"` и так далее.

Наверное, вы уже догадались, как создать документ, в котором на одном и том же месте загружается, скажем, интерактивная диаграмма plotly в формате HTML и статичный ggplot в формате PDF? [Пожалуйста, скажите голосом или напишите в чат, как этого добиться?]{style="color:#d00;"}
:::

## Условный контент {.smaller .scrollable background-image="images/slide.jpg" background-size="contain"}

Для удобства несколько распространенных названий форматов считаются псевдонимами каждое для несколько доступных в Quarto форматов. Вот таблица соответствия:

:::{.content-hidden when-format="markua"}

| Псевдоним  | Форматы                                     |
|------------|---------------------------------------------|
| `latex`    | `latex`, `pdf`                              |
| `pdf`      | `latex`, `pdf`                              |
| `epub`     | `epub`                                      |
| `html`     | `html`, `epub`, `revealjs`                  |
| `html:js`  | `html`, `revealjs`                          | 
| `markdown` | `markdown`, `commonmark`, `gfm`, `markua`   |

:::

::: {.notes}
Эту таблицу стоит понимать буквально. Если вы скроете контент для формата `HTML`, то он не будет виден ни на сайте, ни в презентации `revealjs`, ни в электронной книге `epub`. Если вместо этого вы напишите `.content-hidden when-format="markua"`, то контент в блоке не будет виден ни на HTML-страницах и, соответственно, на сайтах, ни в презентациях `revealjs` вроде этой (то есть, в форматах, которые допускают интерактивные элементы), но будет виден в книгах `epub`.

Ну и напомню, что Quarto динамично развивается. Условный контент в зависимости от формата – это отлично. Надеюсь, они со временем добавят больше условий, например, зависимость от другого контента, стиля и т. д.

В принципе, что-то из этого можно сделать самому в Lua, но это для тех, кто хочет быть богом отчетов.

Вообще многое им еще предстоит. Например, многие YAML-команды работают и в заголовке, и во фрагментах кода, но некоторые работают только из заголовка. Или, например, обращение к метаданным и включения: можно было бы расширить их функционал, например, тоже добавить условные выражения. Если вам нравится Quarto, стоит следить за его развитием.
:::

## Видео {.smaller .scrollable background-image="images/slide.jpg" background-size="contain" style="font-size:0.6em;"}

В форматах HTML в документ можно встроить видео из локального файла или по url. В презентации `revealjs` видео можно добавить в качестве фона.

```{markdown}
#| echo: true
{{< video https://www.youtube.com/watch?v=EbAAmrB0luA title='Quarto for Academics'>}}
```

::: {.content-visible when-format="html:js" align="center"}
{{< video https://www.youtube.com/watch?v=EbAAmrB0luA title='Quarto for Academics'>}}
:::

::: {.content-visible unless-format="html:js"}
:::: {.callout-caution title="Помните"}
Встраивание видео имеет смысл только в формате HTML
::::
:::

Кроме заголовка фрейма можно настраивать такие параметры, как:

- [соотношение сторон (`aspect-ratio="4x3"`);]{}
- [ширина и высота (`width="250" height="175"`);]{}
- [таймкод (`start="26"`).]{}

# Комплексные публикации {background-image="images/section.jpg" background-size="contain"}

## Сайты, блоги, книги {.smaller background-image="images/slide.jpg" background-size="contain"}

Quarto содержит нативную поддержку создания комплексных публикаций:

- [сайты;]{}
- [блоги;]{}
- [книги.]{}

. . .

Любой сайт, блог или книга состоит из основных элементов:

- [метаданные проекта;]{}
- [контент (файлы `.qmd`);]{}
- [элементы навигации (содержание, меню, вкладки, поиск и т. п.);]{}
- [ресурсы (изображения, темы, скрипты и т. п.).]{}

## Создание сайта в Quarto – Заготовка {.smaller background-image="images/slide.jpg" background-size="contain"}

Проще всего создать сайт, блог или книгу как проект RStudio:

. . .

::: {.columns style="valign:bottom;"}
::: {.column}
![](images/website-01-project.jpg){fig-height=100}

Выбираем Quarto…
:::
::: {.column}
::::: {.fragment}
![](images/website-02-files.jpg){fig-height=100}

RStudio создает для нас необходимые файлы и пару файлов для примера
:::::
:::
:::

## Создание сайта в Quarto – Метаданные {.smaller background-image="images/slide.jpg" background-size="contain"}

Информация о проекте, в том числе ссылки на контент,  описание структуры и общий стиль, содержится в файле `_quarto.yml`:

. . .

```yaml
---
project:
  type: website

website:
  title: "quartosite"
  navbar:
    left:
      - href: index.qmd
        text: Home
      - about.qmd

format:
  html:
    theme:
      light: united
      dark: vapor
    css: styles.css
    toc: true
---
```

## Создание сайта в Quarto – Навигация {.smaller background-image="images/slide.jpg" background-size="contain"}

В Quarto можно легко создать следующие элементы навигации:

- [`navbar` (навигационная панель сверху);]{}
- [`sidebar` (боковая навигационная панель);]{}
- [`page-footer` (подвал сайта);]{}
- [`search` (поисковый виджет).]{}

## Создание сайта в Quarto – Навигация {.smaller background-image="images/slide.jpg" background-size="contain"}

Пример задания верхней навигационной панели:

```yaml
website:
  <…>
  # Верхняя панель («шапка»)
  navbar:
    title: "QuartoWebsite" # Переписывает website: title
    logo: www/owls_R.png
    logo-alt: "Otus: R for Data Analysis"
    # Элементы слева
    left:
      - href: index.qmd
        text: Home
      - about.qmd
    # Элементы справа
    right: 
      - href: https://otus.ru
        icon: mortarboard
        target: _blank
```

## Создание сайта в Quarto – Навигация {.smaller background-image="images/slide.jpg" background-size="contain"}

Пример задания боковой панели:

```yaml
website:
  <…>
  # Боковая панель (боковое меню):
  sidebar:
    background: dark  # Один из стандартных цветов текущей темы оформления
    foreground: light # Еще один цвет темы. Они изменятся, если изменить тему
    style: docked     # Прикреплена к своему краю
    contents:
      - section: "Первый раздел"
        contents:
          - entry-01.qmd
          - entry-02.qmd
      - section: "Второй раздел"
        contents:
          - entry-03.qmd
          - entry-04.qmd
```

## Создание сайта в Quarto – Навигация {.smaller background-image="images/slide.jpg" background-size="contain"}

Пример задания нижней панели (подвала):

```yaml
website:
  <…>
  # Подвал
  page-footer:
    background: primary  # «Ведущий» цвет выбранной темы оформления
    foreground: "#eee"
    # Элементы посередине (также можно указать right и left):
    center: 
      - about.qmd
```

## Создание сайта в Quarto – Навигация {.smaller background-image="images/slide.jpg" background-size="contain"}

Пример задания поискового виджета:

```yaml
website:
  <…>
  # Поиск
  search:
    location: navbar # К чему прикрепляется виджет
    type: overlay    # Тип: overlay – иконка со всплывающим виджетом, textbox – стандартный text input
    limit: 5         # Максимальное количество результатов для показа
```

## Создание сайта в Quarto – Рендеринг {.smaller background-image="images/slide.jpg" background-size="contain"}

Для предпросмотра нашего сайта находим:

1. [Меню проекта]{}
2. [Вкладку `Build`]{}
3. [Кнопку `Render Website`]{}

![](images/website-03-render.jpg)

## Создание сайта в Quarto – Публикация {.smaller background-image="images/slide.jpg" background-size="contain"}

Помимо собственного сервера, опубликовать сайт можно на [Quarto Pub](https://quartopub.com/), [Posit Connect](https://posit.co/products/enterprise/connect/), [GitHub Pages](https://pages.github.com/), [Netlify](https://www.netlify.com/) и некоторых других платформах.

. . .

Например, если мы назовем проект <u>и репозиторий на GitHub</u> `username.github.io`, где `username` – наше имя на GitHub, мы создадим свой персональный сайт на GitHub Pages.

Если мы назовем проект и репозиторий `name`, где `name` – любое название, мы создадим сайт по адресу `username.github.io/name`.

## Создание сайта в Quarto – Публикация {.smaller background-image="images/slide.jpg" background-size="contain"}

::: {style="font-size:0.9em;"}
Рассмотрим публикацию на GitHub Pages:

1. [Прописываем, что папка с сайтом должна называться “docs” (по умолчанию “_site”)]{}

:::: {.fragment}

```yaml
project:
  type: website
  output-dir: docs
```
::::

2. [Заходим в свой аккаунт на GitHub и создаем пустой репозиторий (без README)]{}
3. [Связываем свой локальный проект с репозиторием:]{}

:::: {.fragment}

```{bash}
#| label: git-connect
#| eval: false
#| echo: true
#| code-line-numbers: "1|2|3|4|5|6"
git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin https://github.com/username/name.git
git push -u origin main
```
::::
:::

## Создание сайта в Quarto – Публикация {.smaller background-image="images/slide.jpg" background-size="contain"}

4. [В настройках репозитория в меню Pages разрешаем развертывание на Pages: выбираем ветку и папку (@fig-github-pages)]{}

. . .

![Настройка отображения на GitHub Pages](images/github-pages){#fig-github-pages height=11em}

# Рефлексия {background-image="images/section.jpg" background-size="contain"}

## Рефлексия {.smaller background-image="images/slide.jpg" background-size="contain"}

[Спросите себя. Расскажите в чате или голосом:]{.absolute top="90" left="52" style="color:#FF9900 !important;"}

::: {.absolute top="180" left="52"}
1. [Хотите ли вы применять Quarto в своей работе?]{}
2. [Считаете ли вы, что это сложно?]{}
3. [О каких еще возможностях системы вы хотите узнать?]{}
4. [Какой проект вам хочется оформить в Quarto первым? В каком формате вы бы его сверстали?]{}
:::

{{< include bye.qmd >}}